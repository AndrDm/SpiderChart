#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen 0.69.5 */

pub const __MINGW64_VERSION_MAJOR: u32 = 13;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 3584;
pub const _WIN32_WINNT: u32 = 1539;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 0;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _NI_mswin64_: u32 = 1;
pub const _NI_i386_: u32 = 1;
pub const _NI_mswin_: u32 = 1;
pub const _CVI_USE_FUNCS_FOR_VARS_: u32 = 1;
pub const DLL_PROCESS_ATTACH: u32 = 1;
pub const DLL_THREAD_ATTACH: u32 = 2;
pub const DLL_THREAD_DETACH: u32 = 3;
pub const DLL_PROCESS_DETACH: u32 = 0;
pub const THREAD_BASE_PRIORITY_LOWRT: u32 = 15;
pub const THREAD_BASE_PRIORITY_MAX: u32 = 2;
pub const THREAD_BASE_PRIORITY_MIN: i32 = -2;
pub const THREAD_BASE_PRIORITY_IDLE: i32 = -15;
pub const THREAD_PRIORITY_TIME_CRITICAL: u32 = 15;
pub const THREAD_PRIORITY_HIGHEST: u32 = 2;
pub const THREAD_PRIORITY_ABOVE_NORMAL: u32 = 1;
pub const THREAD_PRIORITY_NORMAL: u32 = 0;
pub const THREAD_PRIORITY_LOWEST: i32 = -2;
pub const THREAD_PRIORITY_IDLE: i32 = -15;
pub const _CVI_LIBS_: u32 = 2000;
pub const _CVI_PROFILE_LEVEL_DISABLED_: u32 = 0;
pub const _CVI_PROFILE_LEVEL_FUNCS_: u32 = 1;
pub const _CVI_PROFILE_LEVEL_FUNCS_AND_CALLS_: u32 = 2;
pub const kTwoXAxisVersion: u32 = 101;
pub const kAnnotationVersion: u32 = 102;
pub const kTooltipVersion: u32 = 200;
pub const LIB_VERSION: u32 = 200;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;

//unsafe extern "C" {
//    pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
//}

pub type rsize_t = usize;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
	_unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
	pub locinfo: pthreadlocinfo,
	pub mbcinfo: pthreadmbcinfo,
}
//#[test]
fn bindgen_test_layout_localeinfo_struct() {
	const UNINIT: ::std::mem::MaybeUninit<localeinfo_struct> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<localeinfo_struct>(),
		16usize,
		concat!("Size of: ", stringify!(localeinfo_struct))
	);
	assert_eq!(
		::std::mem::align_of::<localeinfo_struct>(),
		8usize,
		concat!("Alignment of ", stringify!(localeinfo_struct))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(localeinfo_struct),
			"::",
			stringify!(locinfo)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(localeinfo_struct),
			"::",
			stringify!(mbcinfo)
		)
	);
}
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
	pub wLanguage: ::std::os::raw::c_ushort,
	pub wCountry: ::std::os::raw::c_ushort,
	pub wCodePage: ::std::os::raw::c_ushort,
}
//#[test]
fn bindgen_test_layout_tagLC_ID() {
	const UNINIT: ::std::mem::MaybeUninit<tagLC_ID> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<tagLC_ID>(),
		6usize,
		concat!("Size of: ", stringify!(tagLC_ID))
	);
	assert_eq!(
		::std::mem::align_of::<tagLC_ID>(),
		2usize,
		concat!("Alignment of ", stringify!(tagLC_ID))
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).wLanguage) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(tagLC_ID),
			"::",
			stringify!(wLanguage)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).wCountry) as usize - ptr as usize
		},
		2usize,
		concat!(
			"Offset of field: ",
			stringify!(tagLC_ID),
			"::",
			stringify!(wCountry)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).wCodePage) as usize - ptr as usize
		},
		4usize,
		concat!(
			"Offset of field: ",
			stringify!(tagLC_ID),
			"::",
			stringify!(wCodePage)
		)
	);
}
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
	pub _locale_pctype: *const ::std::os::raw::c_ushort,
	pub _locale_mb_cur_max: ::std::os::raw::c_int,
	pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
//#[test]
fn bindgen_test_layout_threadlocaleinfostruct() {
	const UNINIT: ::std::mem::MaybeUninit<threadlocaleinfostruct> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<threadlocaleinfostruct>(),
		16usize,
		concat!("Size of: ", stringify!(threadlocaleinfostruct))
	);
	assert_eq!(
		::std::mem::align_of::<threadlocaleinfostruct>(),
		8usize,
		concat!("Alignment of ", stringify!(threadlocaleinfostruct))
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(threadlocaleinfostruct),
			"::",
			stringify!(_locale_pctype)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize
				- ptr as usize
		},
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(threadlocaleinfostruct),
			"::",
			stringify!(_locale_mb_cur_max)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize
				- ptr as usize
		},
		12usize,
		concat!(
			"Offset of field: ",
			stringify!(threadlocaleinfostruct),
			"::",
			stringify!(_locale_lc_codepage)
		)
	);
}
pub type threadlocinfo = threadlocaleinfostruct;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type int_least32_t = ::std::os::raw::c_int;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type HINSTANCE = *mut ::std::os::raw::c_void;
pub type BOOL = ::std::os::raw::c_int;
pub type DWORD = ::std::os::raw::c_ulong;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type LPSTR = *mut ::std::os::raw::c_char;
pub type HANDLE = *mut ::std::os::raw::c_void;
unsafe extern "C" {
	pub fn LoadLocalizedPanelAnsi(
		hparent: ::std::os::raw::c_int,
		uiFileName: *const ::std::os::raw::c_char,
		panelID: ::std::os::raw::c_int,
		langFileName: *const ::std::os::raw::c_char,
		phpanel: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadLocalizedPanelUtf8(
		hparent: ::std::os::raw::c_int,
		uiFileName: *const ::std::os::raw::c_char,
		panelID: ::std::os::raw::c_int,
		langFileName: *const ::std::os::raw::c_char,
		phpanel: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadLocalizedPanelExAnsi(
		hparent: ::std::os::raw::c_int,
		uiFileName: *const ::std::os::raw::c_char,
		panelID: ::std::os::raw::c_int,
		hInstance: *mut ::std::os::raw::c_void,
		langFileName: *const ::std::os::raw::c_char,
		phpanel: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadLocalizedPanelExUtf8(
		hparent: ::std::os::raw::c_int,
		uiFileName: *const ::std::os::raw::c_char,
		panelID: ::std::os::raw::c_int,
		hInstance: *mut ::std::os::raw::c_void,
		langFileName: *const ::std::os::raw::c_char,
		phpanel: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LocalizePanelAnsi(
		hpanel: ::std::os::raw::c_int,
		langFileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LocalizePanelUtf8(
		hpanel: ::std::os::raw::c_int,
		langFileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadLocalizedMenuBarAnsi(
		hpanel: ::std::os::raw::c_int,
		uiFileName: *const ::std::os::raw::c_char,
		ctrlID: ::std::os::raw::c_int,
		langFileName: *const ::std::os::raw::c_char,
		phmenubar: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadLocalizedMenuBarUtf8(
		hpanel: ::std::os::raw::c_int,
		uiFileName: *const ::std::os::raw::c_char,
		ctrlID: ::std::os::raw::c_int,
		langFileName: *const ::std::os::raw::c_char,
		phmenubar: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadLocalizedMenuBarExAnsi(
		hpanel: ::std::os::raw::c_int,
		uiFileName: *const ::std::os::raw::c_char,
		ctrlID: ::std::os::raw::c_int,
		hInstance: *mut ::std::os::raw::c_void,
		langFileName: *const ::std::os::raw::c_char,
		phmenubar: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadLocalizedMenuBarExUtf8(
		hpanel: ::std::os::raw::c_int,
		uiFileName: *const ::std::os::raw::c_char,
		ctrlID: ::std::os::raw::c_int,
		hInstance: *mut ::std::os::raw::c_void,
		langFileName: *const ::std::os::raw::c_char,
		phmenubar: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LocalizeMenuBarAnsi(
		hmenubar: ::std::os::raw::c_int,
		langFileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LocalizeMenuBarUtf8(
		hmenubar: ::std::os::raw::c_int,
		langFileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
