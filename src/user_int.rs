#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen 0.69.5 */

pub const __MINGW64_VERSION_MAJOR: u32 = 13;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 3584;
pub const _WIN32_WINNT: u32 = 1539;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 0;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _NI_mswin64_: u32 = 1;
pub const _NI_i386_: u32 = 1;
pub const _NI_mswin_: u32 = 1;
pub const _CVI_USE_FUNCS_FOR_VARS_: u32 = 1;
pub const DLL_PROCESS_ATTACH: u32 = 1;
pub const DLL_THREAD_ATTACH: u32 = 2;
pub const DLL_THREAD_DETACH: u32 = 3;
pub const DLL_PROCESS_DETACH: u32 = 0;
pub const THREAD_BASE_PRIORITY_LOWRT: u32 = 15;
pub const THREAD_BASE_PRIORITY_MAX: u32 = 2;
pub const THREAD_BASE_PRIORITY_MIN: i32 = -2;
pub const THREAD_BASE_PRIORITY_IDLE: i32 = -15;
pub const THREAD_PRIORITY_TIME_CRITICAL: u32 = 15;
pub const THREAD_PRIORITY_HIGHEST: u32 = 2;
pub const THREAD_PRIORITY_ABOVE_NORMAL: u32 = 1;
pub const THREAD_PRIORITY_NORMAL: u32 = 0;
pub const THREAD_PRIORITY_LOWEST: i32 = -2;
pub const THREAD_PRIORITY_IDLE: i32 = -15;
pub const _CVI_LIBS_: u32 = 2000;
pub const _CVI_PROFILE_LEVEL_DISABLED_: u32 = 0;
pub const _CVI_PROFILE_LEVEL_FUNCS_: u32 = 1;
pub const _CVI_PROFILE_LEVEL_FUNCS_AND_CALLS_: u32 = 2;
pub const MAX_DRIVENAME_LEN: u32 = 3;
pub const _MAX_UTF8_BYTES_FOR_UTF16: u32 = 3;
pub const MAX_PATHNAME_LEN_ANSI: u32 = 260;
pub const MAX_PATHNAME_LEN_UTF8: u32 = 778;
pub const MAX_DIRNAME_LEN_ANSI: u32 = 256;
pub const MAX_DIRNAME_LEN_UTF8: u32 = 766;
pub const MAX_FILENAME_LEN_ANSI: u32 = 256;
pub const MAX_FILENAME_LEN_UTF8: u32 = 766;
pub const MAX_PATHNAME_LEN: u32 = 260;
pub const MAX_DIRNAME_LEN: u32 = 256;
pub const MAX_FILENAME_LEN: u32 = 256;
pub const MAX_TREE_ITEM_TAG_LEN_UTF8: u32 = 256;
pub const MAX_TREE_ITEM_TAG_LEN_ANSI: u32 = 32;
pub const MAX_TREE_ITEM_TAG_LEN: u32 = 32;
pub const CTRL_NUMERIC: u32 = 100;
pub const CTRL_NUMERIC_THERMOMETER: u32 = 101;
pub const CTRL_NUMERIC_TANK: u32 = 102;
pub const CTRL_NUMERIC_GAUGE: u32 = 103;
pub const CTRL_NUMERIC_METER: u32 = 104;
pub const CTRL_NUMERIC_KNOB: u32 = 105;
pub const CTRL_NUMERIC_DIAL: u32 = 106;
pub const CTRL_NUMERIC_VSLIDE: u32 = 107;
pub const CTRL_NUMERIC_HSLIDE: u32 = 108;
pub const CTRL_NUMERIC_FLAT_VSLIDE: u32 = 109;
pub const CTRL_NUMERIC_FLAT_HSLIDE: u32 = 110;
pub const CTRL_NUMERIC_LEVEL_VSLIDE: u32 = 111;
pub const CTRL_NUMERIC_LEVEL_HSLIDE: u32 = 112;
pub const CTRL_NUMERIC_POINTER_VSLIDE: u32 = 113;
pub const CTRL_NUMERIC_POINTER_HSLIDE: u32 = 114;
pub const CTRL_NUMERIC_LS: u32 = 115;
pub const CTRL_NUMERIC_THERMOMETER_LS: u32 = 116;
pub const CTRL_NUMERIC_TANK_LS: u32 = 117;
pub const CTRL_NUMERIC_GAUGE_LS: u32 = 118;
pub const CTRL_NUMERIC_METER_LS: u32 = 119;
pub const CTRL_NUMERIC_KNOB_LS: u32 = 120;
pub const CTRL_NUMERIC_DIAL_LS: u32 = 121;
pub const CTRL_NUMERIC_LEVEL_VSLIDE_LS: u32 = 126;
pub const CTRL_NUMERIC_LEVEL_HSLIDE_LS: u32 = 127;
pub const CTRL_NUMERIC_POINTER_VSLIDE_LS: u32 = 128;
pub const CTRL_NUMERIC_POINTER_HSLIDE_LS: u32 = 129;
pub const CTRL_COLOR_NUMERIC: u32 = 130;
pub const CTRL_COLOR_NUMERIC_LS: u32 = 131;
pub const CTRL_STRING: u32 = 150;
pub const CTRL_STRING_LS: u32 = 151;
pub const CTRL_TEXT_MSG: u32 = 160;
pub const CTRL_TEXT_BOX: u32 = 170;
pub const CTRL_TEXT_BOX_LS: u32 = 171;
pub const CTRL_SQUARE_COMMAND_BUTTON: u32 = 200;
pub const CTRL_OBLONG_COMMAND_BUTTON: u32 = 201;
pub const CTRL_ROUND_COMMAND_BUTTON: u32 = 202;
pub const CTRL_ROUNDED_COMMAND_BUTTON: u32 = 203;
pub const CTRL_PICTURE_COMMAND_BUTTON: u32 = 204;
pub const CTRL_SQUARE_COMMAND_BUTTON_LS: u32 = 205;
pub const CTRL_PICTURE_COMMAND_BUTTON_LS: u32 = 206;
pub const CTRL_ROUND_BUTTON: u32 = 220;
pub const CTRL_SQUARE_BUTTON: u32 = 221;
pub const CTRL_ROUND_FLAT_BUTTON: u32 = 222;
pub const CTRL_SQUARE_FLAT_BUTTON: u32 = 223;
pub const CTRL_ROUND_RADIO_BUTTON: u32 = 224;
pub const CTRL_SQUARE_RADIO_BUTTON: u32 = 225;
pub const CTRL_CHECK_BOX: u32 = 226;
pub const CTRL_ROUND_PUSH_BUTTON: u32 = 227;
pub const CTRL_SQUARE_PUSH_BUTTON: u32 = 228;
pub const CTRL_ROUND_PUSH_BUTTON2: u32 = 229;
pub const CTRL_SQUARE_PUSH_BUTTON2: u32 = 230;
pub const CTRL_SQUARE_TEXT_BUTTON: u32 = 231;
pub const CTRL_OBLONG_TEXT_BUTTON: u32 = 232;
pub const CTRL_ROUND_TEXT_BUTTON: u32 = 233;
pub const CTRL_ROUNDED_TEXT_BUTTON: u32 = 234;
pub const CTRL_PICTURE_TOGGLE_BUTTON: u32 = 235;
pub const CTRL_SQUARE_BUTTON_LS: u32 = 240;
pub const CTRL_PICTURE_TOGGLE_BUTTON_LS: u32 = 241;
pub const CTRL_SQUARE_PUSH_BUTTON_LS: u32 = 242;
pub const CTRL_SQUARE_TEXT_BUTTON_LS: u32 = 243;
pub const CTRL_ROUND_LIGHT: u32 = 260;
pub const CTRL_SQUARE_LIGHT: u32 = 261;
pub const CTRL_ROUND_LED: u32 = 262;
pub const CTRL_SQUARE_LED: u32 = 263;
pub const CTRL_ROUND_LED_LS: u32 = 264;
pub const CTRL_SQUARE_LED_LS: u32 = 265;
pub const CTRL_HSWITCH: u32 = 280;
pub const CTRL_VSWITCH: u32 = 281;
pub const CTRL_GROOVED_HSWITCH: u32 = 282;
pub const CTRL_GROOVED_VSWITCH: u32 = 283;
pub const CTRL_TOGGLE_HSWITCH: u32 = 284;
pub const CTRL_TOGGLE_VSWITCH: u32 = 285;
pub const CTRL_TOGGLE_HSWITCH_LS: u32 = 288;
pub const CTRL_TOGGLE_VSWITCH_LS: u32 = 289;
pub const CTRL_RING: u32 = 300;
pub const CTRL_RECESSED_MENU_RING: u32 = 301;
pub const CTRL_MENU_RING: u32 = 302;
pub const CTRL_POPUP_MENU_RING: u32 = 303;
pub const CTRL_RING_VSLIDE: u32 = 304;
pub const CTRL_RING_HSLIDE: u32 = 305;
pub const CTRL_RING_FLAT_VSLIDE: u32 = 306;
pub const CTRL_RING_FLAT_HSLIDE: u32 = 307;
pub const CTRL_RING_LEVEL_VSLIDE: u32 = 308;
pub const CTRL_RING_LEVEL_HSLIDE: u32 = 309;
pub const CTRL_RING_POINTER_VSLIDE: u32 = 310;
pub const CTRL_RING_POINTER_HSLIDE: u32 = 311;
pub const CTRL_RING_THERMOMETER: u32 = 312;
pub const CTRL_RING_TANK: u32 = 313;
pub const CTRL_RING_GAUGE: u32 = 314;
pub const CTRL_RING_METER: u32 = 315;
pub const CTRL_RING_KNOB: u32 = 316;
pub const CTRL_RING_DIAL: u32 = 317;
pub const CTRL_PICTURE_RING: u32 = 318;
pub const CTRL_RING_LS: u32 = 319;
pub const CTRL_RECESSED_MENU_RING_LS: u32 = 320;
pub const CTRL_MENU_RING_LS: u32 = 321;
pub const CTRL_POPUP_MENU_RING_LS: u32 = 322;
pub const CTRL_RING_LEVEL_VSLIDE_LS: u32 = 327;
pub const CTRL_RING_LEVEL_HSLIDE_LS: u32 = 328;
pub const CTRL_RING_POINTER_VSLIDE_LS: u32 = 329;
pub const CTRL_RING_POINTER_HSLIDE_LS: u32 = 330;
pub const CTRL_RING_THERMOMETER_LS: u32 = 331;
pub const CTRL_RING_TANK_LS: u32 = 332;
pub const CTRL_RING_GAUGE_LS: u32 = 333;
pub const CTRL_RING_METER_LS: u32 = 334;
pub const CTRL_RING_KNOB_LS: u32 = 335;
pub const CTRL_RING_DIAL_LS: u32 = 336;
pub const CTRL_PICTURE_RING_LS: u32 = 337;
pub const CTRL_LIST: u32 = 340;
pub const CTRL_LIST_LS: u32 = 341;
pub const CTRL_RAISED_BOX: u32 = 380;
pub const CTRL_RECESSED_BOX: u32 = 381;
pub const CTRL_FLAT_BOX: u32 = 382;
pub const CTRL_RAISED_CIRCLE: u32 = 383;
pub const CTRL_RECESSED_CIRCLE: u32 = 384;
pub const CTRL_FLAT_CIRCLE: u32 = 385;
pub const CTRL_RAISED_FRAME: u32 = 386;
pub const CTRL_RECESSED_FRAME: u32 = 387;
pub const CTRL_FLAT_FRAME: u32 = 388;
pub const CTRL_RAISED_ROUND_FRAME: u32 = 389;
pub const CTRL_RECESSED_ROUND_FRAME: u32 = 390;
pub const CTRL_FLAT_ROUND_FRAME: u32 = 391;
pub const CTRL_RAISED_ROUNDED_BOX: u32 = 392;
pub const CTRL_RECESSED_ROUNDED_BOX: u32 = 393;
pub const CTRL_FLAT_ROUNDED_BOX: u32 = 394;
pub const CTRL_RAISED_BOX_LS: u32 = 395;
pub const CTRL_RECESSED_BOX_LS: u32 = 396;
pub const CTRL_SMOOTH_VERTICAL_BOX_LS: u32 = 397;
pub const CTRL_SMOOTH_HORIZONTAL_BOX_LS: u32 = 398;
pub const CTRL_RECESSED_NARROW_FRAME: u32 = 410;
pub const CTRL_GRAPH: u32 = 440;
pub const CTRL_GRAPH_LS: u32 = 441;
pub const CTRL_DIGITAL_GRAPH: u32 = 450;
pub const CTRL_DIGITAL_GRAPH_LS: u32 = 451;
pub const CTRL_STRIP_CHART: u32 = 460;
pub const CTRL_STRIP_CHART_LS: u32 = 461;
pub const CTRL_PICTURE: u32 = 480;
pub const CTRL_PICTURE_LS: u32 = 481;
pub const CTRL_TIMER: u32 = 490;
pub const CTRL_CANVAS: u32 = 500;
pub const CTRL_ACTIVEX: u32 = 503;
pub const CTRL_TABLE: u32 = 510;
pub const CTRL_TABLE_LS: u32 = 511;
pub const CTRL_TREE: u32 = 512;
pub const CTRL_TREE_LS: u32 = 513;
pub const CTRL_HORIZONTAL_SPLITTER: u32 = 520;
pub const CTRL_VERTICAL_SPLITTER: u32 = 521;
pub const CTRL_HORIZONTAL_SPLITTER_LS: u32 = 522;
pub const CTRL_VERTICAL_SPLITTER_LS: u32 = 523;
pub const CTRL_TABS: u32 = 540;
pub const ATTR_DIMMED: u32 = 500;
pub const ATTR_CONSTANT_NAME: u32 = 501;
pub const ATTR_CONSTANT_NAME_LENGTH: u32 = 502;
pub const ATTR_CALLBACK_DATA: u32 = 510;
pub const ATTR_CALLBACK_NAME: u32 = 511;
pub const ATTR_CALLBACK_NAME_LENGTH: u32 = 512;
pub const ATTR_CALLBACK_FUNCTION_POINTER: u32 = 513;
pub const ATTR_VISIBLE: u32 = 530;
pub const ATTR_LEFT: u32 = 531;
pub const ATTR_TOP: u32 = 532;
pub const ATTR_WIDTH: u32 = 533;
pub const ATTR_HEIGHT: u32 = 540;
pub const ATTR_FRAME_COLOR: u32 = 550;
pub const ATTR_SCROLL_BARS: u32 = 551;
pub const ATTR_SCROLL_BAR_COLOR: u32 = 552;
pub const ATTR_HSCROLL_OFFSET: u32 = 560;
pub const ATTR_HSCROLL_OFFSET_MAX: u32 = 561;
pub const ATTR_CHART_HSCROLL_OFFSET: u32 = 562;
pub const ATTR_BACKCOLOR: u32 = 570;
pub const ATTR_TITLEBAR_VISIBLE: u32 = 571;
pub const ATTR_TITLEBAR_THICKNESS: u32 = 572;
pub const ATTR_TITLEBAR_ACTUAL_THICKNESS: u32 = 632;
pub const ATTR_TITLE: u32 = 573;
pub const ATTR_TITLE_LENGTH: u32 = 574;
pub const ATTR_TITLE_COLOR: u32 = 575;
pub const ATTR_TITLE_BACKCOLOR: u32 = 576;
pub const ATTR_FRAME_STYLE: u32 = 577;
pub const ATTR_FRAME_THICKNESS: u32 = 578;
pub const ATTR_FRAME_ACTUAL_WIDTH: u32 = 633;
pub const ATTR_FRAME_ACTUAL_HEIGHT: u32 = 634;
pub const ATTR_MENU_HEIGHT: u32 = 579;
pub const ATTR_MENU_WIDTH: u32 = 635;
pub const ATTR_SIZABLE: u32 = 580;
pub const ATTR_MOVABLE: u32 = 581;
pub const ATTR_NUM_CTRLS: u32 = 582;
pub const ATTR_MOUSE_CURSOR: u32 = 583;
pub const ATTR_TITLE_FONT: u32 = 584;
pub const ATTR_TITLE_CHARACTER_SET: u32 = 631;
pub const ATTR_TITLE_ITALIC: u32 = 585;
pub const ATTR_TITLE_UNDERLINE: u32 = 586;
pub const ATTR_TITLE_STRIKEOUT: u32 = 587;
pub const ATTR_TITLE_POINT_SIZE: u32 = 588;
pub const ATTR_TITLE_BOLD: u32 = 589;
pub const ATTR_TITLE_FONT_NAME_LENGTH: u32 = 590;
pub const ATTR_MENU_BAR_VISIBLE: u32 = 591;
pub const ATTR_CLOSE_CTRL: u32 = 592;
pub const ATTR_VSCROLL_OFFSET: u32 = 593;
pub const ATTR_VSCROLL_OFFSET_MAX: u32 = 594;
pub const ATTR_PARENT_SHARES_SHORTCUT_KEYS: u32 = 595;
pub const ATTR_ACTIVATE_WHEN_CLICKED_ON: u32 = 596;
pub const ATTR_WINDOW_ZOOM: u32 = 597;
pub const ATTR_SYSTEM_WINDOW_HANDLE: u32 = 598;
pub const ATTR_CAN_MINIMIZE: u32 = 599;
pub const ATTR_CAN_MAXIMIZE: u32 = 600;
pub const ATTR_CLOSE_ITEM_VISIBLE: u32 = 601;
pub const ATTR_SYSTEM_MENU_VISIBLE: u32 = 602;
pub const ATTR_PANEL_MENU_BAR_CONSTANT: u32 = 603;
pub const ATTR_PANEL_MENU_BAR_CONSTANT_LENGTH: u32 = 604;
pub const ATTR_TITLE_SIZE_TO_FONT: u32 = 605;
pub const ATTR_PANEL_PARENT: u32 = 606;
pub const ATTR_NUM_CHILDREN: u32 = 607;
pub const ATTR_FIRST_CHILD: u32 = 608;
pub const ATTR_NEXT_PANEL: u32 = 609;
pub const ATTR_ZPLANE_POSITION: u32 = 610;
pub const ATTR_CTRL_STYLE: u32 = 611;
pub const ATTR_CTRL_TAB_POSITION: u32 = 612;
pub const ATTR_PANEL_FIRST_CTRL: u32 = 612;
pub const ATTR_NEXT_CTRL: u32 = 613;
pub const ATTR_ACTIVE: u32 = 614;
pub const ATTR_FLOATING: u32 = 615;
pub const ATTR_TL_ACTIVATE_WHEN_CLICKED_ON: u32 = 616;
pub const ATTR_CONFORM_TO_SYSTEM: u32 = 617;
pub const ATTR_SCALE_CONTENTS_ON_RESIZE: u32 = 618;
pub const ATTR_MIN_HEIGHT_FOR_SCALING: u32 = 619;
pub const ATTR_CTRL_MODE: u32 = 620;
pub const ATTR_MIN_WIDTH_FOR_SCALING: u32 = 621;
pub const ATTR_HAS_TASKBAR_BUTTON: u32 = 622;
pub const ATTR_OWNER_THREAD_ID: u32 = 623;
pub const ATTR_SCROLL_BAR_STYLE: u32 = 624;
pub const ATTR_MINIMIZE_OTHER_PANELS: u32 = 625;
pub const ATTR_CTRL_VAL: u32 = 630;
pub const ATTR_LABEL_COLOR: u32 = 640;
pub const ATTR_LABEL_TEXT: u32 = 641;
pub const ATTR_LABEL_FONT: u32 = 642;
pub const ATTR_LABEL_ITALIC: u32 = 643;
pub const ATTR_LABEL_UNDERLINE: u32 = 644;
pub const ATTR_LABEL_STRIKEOUT: u32 = 645;
pub const ATTR_LABEL_POINT_SIZE: u32 = 646;
pub const ATTR_LABEL_BOLD: u32 = 647;
pub const ATTR_LABEL_ANGLE: u32 = 651;
pub const ATTR_LABEL_TEXT_LENGTH: u32 = 648;
pub const ATTR_LABEL_SIZE_TO_TEXT: u32 = 649;
pub const ATTR_LABEL_FONT_NAME_LENGTH: u32 = 650;
pub const ATTR_LABEL_CHARACTER_SET: u32 = 661;
pub const ATTR_LABEL_VISIBLE: u32 = 660;
pub const ATTR_LABEL_LEFT: u32 = 670;
pub const ATTR_LABEL_TOP: u32 = 671;
pub const ATTR_LABEL_WIDTH: u32 = 672;
pub const ATTR_LABEL_HEIGHT: u32 = 673;
pub const ATTR_LABEL_BGCOLOR: u32 = 674;
pub const ATTR_LABEL_JUSTIFY: u32 = 675;
pub const ATTR_LABEL_RAISED: u32 = 676;
pub const ATTR_TOOLTIP_TEXT: u32 = 652;
pub const ATTR_TOOLTIP_TEXT_LENGTH: u32 = 653;
pub const ATTR_TOOLTIP_DELAY: u32 = 654;
pub const ATTR_DISABLE_CTRL_TOOLTIP: u32 = 655;
pub const ATTR_TOOLTIP_HIDE_DELAY: u32 = 656;
pub const ATTR_TEXT_COLOR: u32 = 680;
pub const ATTR_TEXT_FONT_NAME_LENGTH: u32 = 681;
pub const ATTR_TEXT_FONT: u32 = 682;
pub const ATTR_TEXT_ITALIC: u32 = 683;
pub const ATTR_TEXT_UNDERLINE: u32 = 684;
pub const ATTR_TEXT_STRIKEOUT: u32 = 685;
pub const ATTR_TEXT_POINT_SIZE: u32 = 686;
pub const ATTR_TEXT_BOLD: u32 = 687;
pub const ATTR_TEXT_ANGLE: u32 = 688;
pub const ATTR_TEXT_CHARACTER_SET: u32 = 689;
pub const ATTR_TEXT_BGCOLOR: u32 = 690;
pub const ATTR_TEXT_JUSTIFY: u32 = 700;
pub const ATTR_DATA_TYPE: u32 = 710;
pub const ATTR_CTRL_INDEX: u32 = 720;
pub const ATTR_DFLT_INDEX: u32 = 721;
pub const ATTR_MAX_VALUE: u32 = 730;
pub const ATTR_MIN_VALUE: u32 = 731;
pub const ATTR_DFLT_VALUE: u32 = 732;
pub const ATTR_INCR_VALUE: u32 = 733;
pub const ATTR_FORMAT: u32 = 734;
pub const ATTR_PRECISION: u32 = 735;
pub const ATTR_SHOW_RADIX: u32 = 736;
pub const ATTR_SHOW_INCDEC_ARROWS: u32 = 737;
pub const ATTR_CHECK_RANGE: u32 = 738;
pub const ATTR_PADDING: u32 = 739;
pub const ATTR_DFLT_VALUE_LENGTH: u32 = 740;
pub const ATTR_DISABLE_RADIX: u32 = 741;
pub const ATTR_INCDEC_WIDTH: u32 = 742;
pub const ATTR_SLIDE_INCDEC_LENGTH: u32 = 743;
pub const ATTR_MENU_ARROW_WIDTH: u32 = 744;
pub const ATTR_MENU_ARROW_HEIGHT: u32 = 745;
pub const ATTR_DISABLE_CHECK_MARK: u32 = 755;
pub const ATTR_MAX_ENTRY_LENGTH: u32 = 760;
pub const ATTR_MAX_ENTRY_CHARS: u32 = 761;
pub const ATTR_TEXT_SELECTION_START: u32 = 762;
pub const ATTR_TEXT_SELECTION_LENGTH: u32 = 763;
pub const ATTR_ENABLE_CHARACTER_MASKING: u32 = 764;
pub const ATTR_MASK_CHARACTER: u32 = 765;
pub const ATTR_STRING_TEXT_LENGTH: u32 = 770;
pub const ATTR_FIRST_VISIBLE_LINE: u32 = 790;
pub const ATTR_WRAP_MODE: u32 = 791;
pub const ATTR_EXTRA_LINES: u32 = 793;
pub const ATTR_TOTAL_LINES: u32 = 794;
pub const ATTR_ENTER_IS_NEWLINE: u32 = 795;
pub const ATTR_CONFORM_TO_SYSTEM_THEME: u32 = 800;
pub const ATTR_DISABLE_PANEL_THEME: u32 = 801;
pub const ATTR_SCROLL_BAR_SIZE: u32 = 820;
pub const ATTR_VISIBLE_LINES: u32 = 821;
pub const ATTR_NO_EDIT_TEXT: u32 = 840;
pub const ATTR_TEXT_RAISED: u32 = 860;
pub const ATTR_SIZE_TO_TEXT: u32 = 861;
pub const ATTR_CMD_BUTTON_COLOR: u32 = 880;
pub const ATTR_AUTO_SIZING: u32 = 881;
pub const ATTR_ON_VALUE: u32 = 900;
pub const ATTR_OFF_VALUE: u32 = 901;
pub const ATTR_ON_VALUE_LENGTH: u32 = 902;
pub const ATTR_OFF_VALUE_LENGTH: u32 = 903;
pub const ATTR_BINARY_SWITCH_COLOR: u32 = 904;
pub const ATTR_ON_COLOR: u32 = 920;
pub const ATTR_OFF_COLOR: u32 = 921;
pub const ATTR_ON_TEXT: u32 = 940;
pub const ATTR_OFF_TEXT: u32 = 941;
pub const ATTR_ON_TEXT_LENGTH: u32 = 942;
pub const ATTR_OFF_TEXT_LENGTH: u32 = 943;
pub const ATTR_DIG_DISP_TOP: u32 = 970;
pub const ATTR_DIG_DISP_LEFT: u32 = 971;
pub const ATTR_DIG_DISP_WIDTH: u32 = 972;
pub const ATTR_DIG_DISP_HEIGHT: u32 = 973;
pub const ATTR_SHOW_DIG_DISP: u32 = 974;
pub const ATTR_SLIDER_COLOR: u32 = 980;
pub const ATTR_NEEDLE_COLOR: u32 = 980;
pub const ATTR_FILL_HOUSING_COLOR: u32 = 981;
pub const ATTR_MARKER_STYLE: u32 = 982;
pub const ATTR_TICK_STYLE: u32 = 983;
pub const ATTR_FILL_COLOR: u32 = 985;
pub const ATTR_FILL_OPTION: u32 = 986;
pub const ATTR_MARKER_START_ANGLE: u32 = 990;
pub const ATTR_MARKER_END_ANGLE: u32 = 991;
pub const ATTR_SLIDER_WIDTH: u32 = 992;
pub const ATTR_SLIDER_HEIGHT: u32 = 993;
pub const ATTR_FORCE_SMOOTH_DRAGGING: u32 = 994;
pub const ATTR_SHOW_MORE_BUTTON: u32 = 995;
pub const ATTR_SHOW_TRANSPARENT: u32 = 996;
pub const ATTR_SLIDER_LEFT: u32 = 997;
pub const ATTR_SLIDER_TOP: u32 = 998;
pub const ATTR_NUM_DIVISIONS: u32 = 999;
pub const ATTR_MENU_ARROW_COLOR: u32 = 1000;
pub const ATTR_MENU_BAR_POINT_SIZE: u32 = 1010;
pub const ATTR_MENU_BAR_BOLD: u32 = 1011;
pub const ATTR_MENU_BAR_ITALIC: u32 = 1012;
pub const ATTR_MENU_BAR_UNDERLINE: u32 = 1013;
pub const ATTR_MENU_BAR_STRIKEOUT: u32 = 1014;
pub const ATTR_MENU_BAR_FONT: u32 = 1015;
pub const ATTR_MENU_BAR_FONT_NAME_LENGTH: u32 = 1016;
pub const ATTR_MENU_BAR_CHARACTER_SET: u32 = 1021;
pub const ATTR_MENU_IMAGE_BACKGROUND_COLOR: u32 = 1017;
pub const ATTR_MENU_BAR_IMAGE_SIZE: u32 = 1018;
pub const ATTR_SHOW_IMMEDIATE_ACTION_SYMBOL: u32 = 1019;
pub const ATTR_SHORTCUT_KEY: u32 = 1020;
pub const ATTR_CHECKED: u32 = 1040;
pub const ATTR_IS_SEPARATOR: u32 = 1041;
pub const ATTR_ITEM_NAME: u32 = 1042;
pub const ATTR_ITEM_NAME_LENGTH: u32 = 1043;
pub const ATTR_SUBMENU_ID: u32 = 1044;
pub const ATTR_NEXT_ITEM_ID: u32 = 1045;
pub const ATTR_BOLD: u32 = 1046;
pub const ATTR_IMAGE_FILE: u32 = 1050;
pub const ATTR_IMAGE_FILE_LENGTH: u32 = 1051;
pub const ATTR_FAST_DRAW_BUTTON: u32 = 1052;
pub const ATTR_USE_SUBIMAGE: u32 = 1053;
pub const ATTR_SUBIMAGE_TOP: u32 = 1054;
pub const ATTR_SUBIMAGE_LEFT: u32 = 1055;
pub const ATTR_SUBIMAGE_WIDTH: u32 = 1056;
pub const ATTR_SUBIMAGE_HEIGHT: u32 = 1057;
pub const ATTR_MENU_NAME: u32 = 1060;
pub const ATTR_MENU_NAME_LENGTH: u32 = 1061;
pub const ATTR_NUM_MENU_ITEMS: u32 = 1062;
pub const ATTR_NEXT_MENU_ID: u32 = 1063;
pub const ATTR_FIRST_ITEM_ID: u32 = 1064;
pub const ATTR_NUM_MENUS: u32 = 1070;
pub const ATTR_DRAW_LIGHT_BEVEL: u32 = 1071;
pub const ATTR_DIMMER_CALLBACK: u32 = 1072;
pub const ATTR_FIRST_MENU_ID: u32 = 1073;
pub const ATTR_SEND_DIMMER_EVENTS_FOR_ALL_KEYS: u32 = 1074;
pub const ATTR_GRID_COLOR: u32 = 1080;
pub const ATTR_GRID_STYLE: u32 = 1079;
pub const ATTR_PLOT_BGCOLOR: u32 = 1081;
pub const ATTR_XYNAME_FONT: u32 = 1082;
pub const ATTR_XYNAME_CHARACTER_SET: u32 = 1138;
pub const ATTR_XYNAME_COLOR: u32 = 1083;
pub const ATTR_XYLABEL_FONT: u32 = 1084;
pub const ATTR_XYLABEL_COLOR: u32 = 1085;
pub const ATTR_XNAME: u32 = 1086;
pub const ATTR_XGRID_VISIBLE: u32 = 1087;
pub const ATTR_XLABEL_VISIBLE: u32 = 1088;
pub const ATTR_XFORMAT: u32 = 1089;
pub const ATTR_XDIVISIONS: u32 = 1090;
pub const ATTR_XPRECISION: u32 = 1091;
pub const ATTR_XENG_UNITS: u32 = 1092;
pub const ATTR_YNAME: u32 = 1093;
pub const ATTR_YGRID_VISIBLE: u32 = 1094;
pub const ATTR_YLABEL_VISIBLE: u32 = 1095;
pub const ATTR_YMAP_MODE: u32 = 1096;
pub const ATTR_YFORMAT: u32 = 1097;
pub const ATTR_YDIVISIONS: u32 = 1098;
pub const ATTR_YPRECISION: u32 = 1099;
pub const ATTR_YENG_UNITS: u32 = 1100;
pub const ATTR_EDGE_STYLE: u32 = 1101;
pub const ATTR_BORDER_VISIBLE: u32 = 1102;
pub const ATTR_XYNAME_BOLD: u32 = 1103;
pub const ATTR_XYNAME_ITALIC: u32 = 1104;
pub const ATTR_XYNAME_UNDERLINE: u32 = 1105;
pub const ATTR_XYNAME_STRIKEOUT: u32 = 1106;
pub const ATTR_XYNAME_POINT_SIZE: u32 = 1107;
pub const ATTR_XNAME_LENGTH: u32 = 1108;
pub const ATTR_YNAME_LENGTH: u32 = 1109;
pub const ATTR_XYNAME_FONT_NAME_LENGTH: u32 = 1110;
pub const ATTR_XYLABEL_BOLD: u32 = 1111;
pub const ATTR_XYLABEL_ITALIC: u32 = 1112;
pub const ATTR_XYLABEL_UNDERLINE: u32 = 1113;
pub const ATTR_XYLABEL_STRIKEOUT: u32 = 1114;
pub const ATTR_XYLABEL_POINT_SIZE: u32 = 1115;
pub const ATTR_XYLABEL_FONT_NAME_LENGTH: u32 = 1116;
pub const ATTR_GRAPH_BGCOLOR: u32 = 1117;
pub const ATTR_PLOT_AREA_WIDTH: u32 = 1118;
pub const ATTR_PLOT_AREA_HEIGHT: u32 = 1119;
pub const ATTR_INNER_MARKERS_VISIBLE: u32 = 1120;
pub const ATTR_YREVERSE: u32 = 1121;
pub const ATTR_XUSE_LABEL_STRINGS: u32 = 1122;
pub const ATTR_YUSE_LABEL_STRINGS: u32 = 1123;
pub const ATTR_XAXIS_GAIN: u32 = 1124;
pub const ATTR_YAXIS_GAIN: u32 = 1125;
pub const ATTR_XAXIS_OFFSET: u32 = 1126;
pub const ATTR_YAXIS_OFFSET: u32 = 1127;
pub const ATTR_PLOT_AREA_TOP: u32 = 1128;
pub const ATTR_PLOT_AREA_LEFT: u32 = 1129;
pub const ATTR_XPADDING: u32 = 1130;
pub const ATTR_YPADDING: u32 = 1131;
pub const ATTR_ACTUAL_XDIVISIONS: u32 = 1132;
pub const ATTR_ACTUAL_YDIVISIONS: u32 = 1133;
pub const ATTR_ACTUAL_XPRECISION: u32 = 1134;
pub const ATTR_ACTUAL_YPRECISION: u32 = 1135;
pub const ATTR_XMINORGRID_VISIBLE: u32 = 1136;
pub const ATTR_YMINORGRID_VISIBLE: u32 = 1137;
pub const ATTR_FIXED_PLOT_AREA: u32 = 1139;
pub const ATTR_NUM_CURSORS: u32 = 1140;
pub const ATTR_XMAP_MODE: u32 = 1141;
pub const ATTR_DATA_MODE: u32 = 1142;
pub const ATTR_COPY_ORIGINAL_DATA: u32 = 1143;
pub const ATTR_XMARK_ORIGIN: u32 = 1144;
pub const ATTR_YMARK_ORIGIN: u32 = 1145;
pub const ATTR_SMOOTH_UPDATE: u32 = 1146;
pub const ATTR_REFRESH_GRAPH: u32 = 1147;
pub const ATTR_SHIFT_TEXT_PLOTS: u32 = 1148;
pub const ATTR_ACTIVE_YAXIS: u32 = 1149;
pub const ATTR_XREVERSE: u32 = 1150;
pub const ATTR_ENABLE_ZOOM_AND_PAN: u32 = 1151;
pub const ATTR_XLOOSE_FIT_AUTOSCALING: u32 = 1152;
pub const ATTR_YLOOSE_FIT_AUTOSCALING: u32 = 1153;
pub const ATTR_XLOOSE_FIT_AUTOSCALING_UNIT: u32 = 1154;
pub const ATTR_YLOOSE_FIT_AUTOSCALING_UNIT: u32 = 1155;
pub const ATTR_ENABLE_ANTI_ALIASING: u32 = 1156;
pub const ATTR_LEGEND_VISIBLE: u32 = 1157;
pub const ATTR_LEGEND_TOP: u32 = 1158;
pub const ATTR_LEGEND_LEFT: u32 = 1159;
pub const ATTR_LEGEND_WIDTH: u32 = 1160;
pub const ATTR_LEGEND_HEIGHT: u32 = 1161;
pub const ATTR_LEGEND_FRAME_COLOR: u32 = 1162;
pub const ATTR_LEGEND_PLOT_BGCOLOR: u32 = 1163;
pub const ATTR_LEGEND_SHOW_SAMPLES: u32 = 1164;
pub const ATTR_LEGEND_AUTO_SIZE: u32 = 1165;
pub const ATTR_LEGEND_AUTO_DISPLAY: u32 = 1166;
pub const ATTR_LEGEND_NUM_VISIBLE_ITEMS: u32 = 1167;
pub const ATTR_ACTIVE_XAXIS: u32 = 1168;
pub const ATTR_LEGEND_INTERACTIVE: u32 = 1169;
pub const ATTR_NUM_TRACES: u32 = 1170;
pub const ATTR_POINTS_PER_SCREEN: u32 = 1171;
pub const ATTR_SCROLL_MODE: u32 = 1172;
pub const ATTR_ENABLE_EDITABLE_AXES: u32 = 1173;
pub const ATTR_ZOOM_STYLE: u32 = 1180;
pub const ATTR_CURSOR_MODE: u32 = 1200;
pub const ATTR_CURSOR_POINT_STYLE: u32 = 1201;
pub const ATTR_CROSS_HAIR_STYLE: u32 = 1202;
pub const ATTR_CURSOR_COLOR: u32 = 1203;
pub const ATTR_CURSOR_YAXIS: u32 = 1204;
pub const ATTR_CURSOR_ENABLED: u32 = 1205;
pub const ATTR_CURSOR_XAXIS: u32 = 1206;
pub const ATTR_CURSOR_SNAPPING_PLOT: u32 = 1207;
pub const ATTR_PLOT_OPACITY: u32 = 1228;
pub const ATTR_TRACE_OPACITY: u32 = 1228;
pub const ATTR_TRACE_THICKNESS: u32 = 1229;
pub const ATTR_TRACE_COLOR: u32 = 1230;
pub const ATTR_PLOT_STYLE: u32 = 1231;
pub const ATTR_TRACE_POINT_STYLE: u32 = 1232;
pub const ATTR_LINE_STYLE: u32 = 1233;
pub const ATTR_TRACE_VISIBLE: u32 = 1234;
pub const ATTR_TRACE_YAXIS: u32 = 1235;
pub const ATTR_HISTORY_BUFFER_SIZE: u32 = 1236;
pub const ATTR_STRIP_CHART_PAUSED: u32 = 1237;
pub const ATTR_SWEEP_LINE_COLOR: u32 = 1238;
pub const ATTR_SHOW_CHART_DIVISION_LABELS: u32 = 1239;
pub const ATTR_TRACE_BGCOLOR: u32 = 1240;
pub const ATTR_PLOT_FONT: u32 = 1241;
pub const ATTR_PLOT_FONT_NAME_LENGTH: u32 = 1242;
pub const ATTR_INTERPOLATE_PIXELS: u32 = 1243;
pub const ATTR_PLOT_ZPLANE_POSITION: u32 = 1244;
pub const ATTR_NUM_POINTS: u32 = 1245;
pub const ATTR_PLOT_XDATA: u32 = 1246;
pub const ATTR_PLOT_YDATA: u32 = 1247;
pub const ATTR_PLOT_ZDATA: u32 = 1248;
pub const ATTR_PLOT_XDATA_TYPE: u32 = 1249;
pub const ATTR_PLOT_YDATA_TYPE: u32 = 1250;
pub const ATTR_PLOT_ZDATA_TYPE: u32 = 1251;
pub const ATTR_PLOT_XDATA_SIZE: u32 = 1252;
pub const ATTR_PLOT_YDATA_SIZE: u32 = 1253;
pub const ATTR_PLOT_ZDATA_SIZE: u32 = 1254;
pub const ATTR_PLOT_YAXIS: u32 = 1255;
pub const ATTR_PLOT_SNAPPABLE: u32 = 1256;
pub const ATTR_PLOT_ORIGIN: u32 = 1257;
pub const ATTR_PLOT_THICKNESS: u32 = 1258;
pub const ATTR_PLOT_XAXIS: u32 = 1259;
pub const ATTR_CHECK_MODE: u32 = 1260;
pub const ATTR_CHECK_STYLE: u32 = 1261;
pub const ATTR_TEXT_CLICK_TOGGLES_CHECK: u32 = 1262;
pub const ATTR_HILITE_CURRENT_ITEM: u32 = 1263;
pub const ATTR_ALLOW_ROOM_FOR_IMAGES: u32 = 1264;
pub const ATTR_DRAGGABLE_MARKS: u32 = 1265;
pub const ATTR_INTERVAL: u32 = 1270;
pub const ATTR_ENABLED: u32 = 1271;
pub const ATTR_PLOT_LG_VISIBLE: u32 = 1275;
pub const ATTR_TRACE_LG_VISIBLE: u32 = 1275;
pub const ATTR_PLOT_LG_TEXT: u32 = 1276;
pub const ATTR_TRACE_LG_TEXT: u32 = 1276;
pub const ATTR_PLOT_LG_TEXT_LENGTH: u32 = 1277;
pub const ATTR_TRACE_LG_TEXT_LENGTH: u32 = 1277;
pub const ATTR_PLOT_LG_TEXT_COLOR: u32 = 1278;
pub const ATTR_TRACE_LG_TEXT_COLOR: u32 = 1278;
pub const ATTR_PLOT_LG_FONT: u32 = 1280;
pub const ATTR_TRACE_LG_FONT: u32 = 1280;
pub const ATTR_PLOT_LG_FONT_NAME_LENGTH: u32 = 1281;
pub const ATTR_TRACE_LG_FONT_NAME_LENGTH: u32 = 1281;
pub const ATTR_FRAME_VISIBLE: u32 = 1290;
pub const ATTR_PICT_BGCOLOR: u32 = 1291;
pub const ATTR_FIT_MODE: u32 = 1292;
pub const ATTR_ORIENTATION: u32 = 1300;
pub const ATTR_PRINT_AREA_HEIGHT: u32 = 1301;
pub const ATTR_PRINT_AREA_WIDTH: u32 = 1302;
pub const ATTR_NUMCOPIES: u32 = 1303;
pub const ATTR_XRESOLUTION: u32 = 1304;
pub const ATTR_YRESOLUTION: u32 = 1305;
pub const ATTR_XOFFSET: u32 = 1306;
pub const ATTR_YOFFSET: u32 = 1307;
pub const ATTR_COLOR_MODE: u32 = 1308;
pub const ATTR_DUPLEX: u32 = 1309;
pub const ATTR_EJECT_AFTER: u32 = 1310;
pub const ATTR_TEXT_WRAP: u32 = 1311;
pub const ATTR_TAB_INTERVAL: u32 = 1312;
pub const ATTR_SHOW_PAGE_NUMBERS: u32 = 1313;
pub const ATTR_SHOW_LINE_NUMBERS: u32 = 1314;
pub const ATTR_SHOW_FILE_NAME: u32 = 1315;
pub const ATTR_SHOW_DATE: u32 = 1316;
pub const ATTR_SHOW_TIME: u32 = 1317;
pub const ATTR_PRINT_FONT_NAME: u32 = 1318;
pub const ATTR_PRINT_ITALIC: u32 = 1319;
pub const ATTR_PRINT_UNDERLINE: u32 = 1320;
pub const ATTR_PRINT_STRIKEOUT: u32 = 1321;
pub const ATTR_PRINT_POINT_SIZE: u32 = 1322;
pub const ATTR_PRINT_BOLD: u32 = 1323;
pub const ATTR_PRINT_FONT_NAME_LENGTH: u32 = 1324;
pub const ATTR_PRINTER_NAME: u32 = 1325;
pub const ATTR_PRINTER_NAME_LENGTH: u32 = 1326;
pub const ATTR_BITMAP_PRINTING: u32 = 1327;
pub const ATTR_SYSTEM_PRINT_DIALOG_ONLY: u32 = 1328;
pub const ATTR_CHARS_PER_LINE: u32 = 1329;
pub const ATTR_LINES_PER_PAGE: u32 = 1330;
pub const ATTR_PRINT_CHARACTER_SET: u32 = 1331;
pub const ATTR_PEN_COLOR: u32 = 1350;
pub const ATTR_PEN_FILL_COLOR: u32 = 1351;
pub const ATTR_PEN_MODE: u32 = 1354;
pub const ATTR_PEN_WIDTH: u32 = 1355;
pub const ATTR_PEN_PATTERN: u32 = 1356;
pub const ATTR_PEN_STYLE: u32 = 1357;
pub const ATTR_DRAW_POLICY: u32 = 1370;
pub const ATTR_OVERLAPPED: u32 = 1372;
pub const ATTR_OVERLAPPED_POLICY: u32 = 1373;
pub const ATTR_XCOORD_AT_ORIGIN: u32 = 1374;
pub const ATTR_YCOORD_AT_ORIGIN: u32 = 1375;
pub const ATTR_XSCALING: u32 = 1376;
pub const ATTR_YSCALING: u32 = 1377;
pub const ATTR_ALLOW_UNSAFE_TIMER_EVENTS: u32 = 1400;
pub const ATTR_REPORT_LOAD_FAILURE: u32 = 1405;
pub const ATTR_ALLOW_MISSING_CALLBACKS: u32 = 1410;
pub const ATTR_ANTI_ALIASING_RESOLUTION: u32 = 1411;
pub const ATTR_SUPPRESS_EVENT_PROCESSING: u32 = 1415;
pub const ATTR_TASKBAR_BUTTON_VISIBLE: u32 = 1420;
pub const ATTR_TASKBAR_BUTTON_TEXT: u32 = 1425;
pub const ATTR_DEFAULT_MONITOR: u32 = 1430;
pub const ATTR_PRIMARY_MONITOR: u32 = 1435;
pub const ATTR_NUM_MONITORS: u32 = 1440;
pub const ATTR_FIRST_MONITOR: u32 = 1445;
pub const ATTR_DISABLE_PROG_PANEL_SIZE_EVENTS: u32 = 1450;
pub const ATTR_USE_LOCALIZED_DECIMAL_SYMBOL: u32 = 1451;
pub const ATTR_LOCALIZED_DECIMAL_SYMBOL: u32 = 1452;
pub const ATTR_NUM_DIGITS_FLOATING_POINT: u32 = 1453;
pub const ATTR_MINIMIZE_PANELS_TO_DESKTOP: u32 = 1455;
pub const ATTR_USE_CHECKERBOARD_DIMMING: u32 = 1456;
pub const ATTR_RESOLUTION_ADJUSTMENT: u32 = 1500;
pub const ATTR_UPPER_LEFT_CORNER_COLOR: u32 = 1510;
pub const ATTR_ROW_LABELS_COLOR: u32 = 1511;
pub const ATTR_COLUMN_LABELS_COLOR: u32 = 1512;
pub const ATTR_TABLE_BGCOLOR: u32 = 1513;
pub const ATTR_TABLE_MODE: u32 = 1514;
pub const ATTR_ROW_LABELS_VISIBLE: u32 = 1515;
pub const ATTR_COLUMN_LABELS_VISIBLE: u32 = 1516;
pub const ATTR_ROW_LABELS_WIDTH: u32 = 1517;
pub const ATTR_COLUMN_LABELS_HEIGHT: u32 = 1518;
pub const ATTR_FIRST_VISIBLE_ROW: u32 = 1519;
pub const ATTR_FIRST_VISIBLE_COLUMN: u32 = 1520;
pub const ATTR_NUM_VISIBLE_ROWS: u32 = 1521;
pub const ATTR_NUM_VISIBLE_COLUMNS: u32 = 1522;
pub const ATTR_ENABLE_ROW_SIZING: u32 = 1523;
pub const ATTR_ENABLE_COLUMN_SIZING: u32 = 1524;
pub const ATTR_ENABLE_POPUP_MENU: u32 = 1525;
pub const ATTR_GRID_AREA_TOP: u32 = 1526;
pub const ATTR_GRID_AREA_LEFT: u32 = 1527;
pub const ATTR_GRID_AREA_WIDTH: u32 = 1528;
pub const ATTR_GRID_AREA_HEIGHT: u32 = 1529;
pub const ATTR_TABLE_RUN_STATE: u32 = 1530;
pub const ATTR_AUTO_EDIT: u32 = 1531;
pub const ATTR_SNAP_COLUMN_WIDTHS_TO_CTRL_WIDTH: u32 = 1532;
pub const ATTR_CELL_TYPE: u32 = 1580;
pub const ATTR_CELL_DIMMED: u32 = 1581;
pub const ATTR_CELL_MODE: u32 = 1582;
pub const ATTR_HORIZONTAL_GRID_COLOR: u32 = 1583;
pub const ATTR_VERTICAL_GRID_COLOR: u32 = 1584;
pub const ATTR_HORIZONTAL_GRID_VISIBLE: u32 = 1585;
pub const ATTR_VERTICAL_GRID_VISIBLE: u32 = 1586;
pub const ATTR_MIN_NUM_LINES_VISIBLE: u32 = 1587;
pub const ATTR_INCDEC_ARROW_COLOR: u32 = 1588;
pub const ATTR_NUM_CELL_DFLT_VALUE: u32 = 1589;
pub const ATTR_STR_CELL_DFLT_VALUE: u32 = 1590;
pub const ATTR_STR_CELL_DFLT_VALUE_LENGTH: u32 = 1591;
pub const ATTR_CELL_JUSTIFY: u32 = 1592;
pub const ATTR_STR_CELL_NUM_LINES: u32 = 1593;
pub const ATTR_CELL_FRAME_COLOR: u32 = 1594;
pub const ATTR_SHOW_RING_ARROW: u32 = 1595;
pub const ATTR_RING_ARROW_LOCATION: u32 = 1596;
pub const ATTR_RING_ITEMS_UNIQUE: u32 = 1597;
pub const ATTR_CASE_SENSITIVE_COMPARE: u32 = 1598;
pub const ATTR_CELL_SHORTCUT_KEY: u32 = 1599;
pub const ATTR_USE_LABEL_TEXT: u32 = 1620;
pub const ATTR_SIZE_MODE: u32 = 1621;
pub const ATTR_LABEL_WRAP_MODE: u32 = 1622;
pub const ATTR_ROW_HEIGHT: u32 = 1650;
pub const ATTR_ROW_ACTUAL_HEIGHT: u32 = 1651;
pub const ATTR_COLUMN_WIDTH: u32 = 1700;
pub const ATTR_COLUMN_ACTUAL_WIDTH: u32 = 1701;
pub const ATTR_COLUMN_VISIBLE: u32 = 1702;
pub const ATTR_ROW_VISIBLE: u32 = 1703;
pub const ATTR_DATASOCKET_ENABLED: u32 = 1750;
pub const ATTR_DS_BIND_PLOT_STYLE: u32 = 1770;
pub const ATTR_DS_BIND_POINT_STYLE: u32 = 1771;
pub const ATTR_DS_BIND_LINE_STYLE: u32 = 1772;
pub const ATTR_DS_BIND_PLOT_COLOR: u32 = 1773;
pub const ATTR_DATASOCKET_SOURCE: u32 = 1791;
pub const ATTR_DATASOCKET_SOURCE_LENGTH: u32 = 1792;
pub const ATTR_DATASOCKET_MODE: u32 = 1793;
pub const ATTR_COLOR_DEPTH: u32 = 1800;
pub const ATTR_SYSTEM_MONITOR_HANDLE: u32 = 1801;
pub const ATTR_NEXT_MONITOR: u32 = 1802;
pub const ATTR_POPUP_STYLE: u32 = 1850;
pub const ATTR_TREE_BGCOLOR: u32 = 1900;
pub const ATTR_SHOW_CONNECTION_LINES: u32 = 1901;
pub const ATTR_SHOW_PLUS_MINUS: u32 = 1902;
pub const ATTR_SHOW_MARKS: u32 = 1903;
pub const ATTR_SHOW_IMAGES: u32 = 1904;
pub const ATTR_MARK_REFLECT: u32 = 1905;
pub const ATTR_AUTO_EXPAND: u32 = 1906;
pub const ATTR_AUTO_HSCROLL: u32 = 1907;
pub const ATTR_FULL_ROW_SELECT: u32 = 1908;
pub const ATTR_INDENT_OFFSET: u32 = 1909;
pub const ATTR_RADIO_SIBLING_ALWAYS_MARKED: u32 = 1910;
pub const ATTR_TEXT_CLICK_TOGGLES_MARK: u32 = 1911;
pub const ATTR_HIDE_ACTIVE_ITEM: u32 = 1912;
pub const ATTR_SELECTION_MODE: u32 = 1913;
pub const ATTR_TREE_RUN_STATE: u32 = 1914;
pub const ATTR_ENABLE_DRAG_DROP: u32 = 1915;
pub const ATTR_ENABLE_DRAG_DROP_COPY: u32 = 1924;
pub const ATTR_EXPANDED_IMAGE_INDEX: u32 = 1916;
pub const ATTR_DISABLE_TREE_TOOLTIPS: u32 = 1917;
pub const ATTR_DISABLE_TOOLTIPS: u32 = 1917;
pub const ATTR_HIDE_ACTIVE_ITEM_ALWAYS: u32 = 1918;
pub const ATTR_HIDE_HILITE: u32 = 1919;
pub const ATTR_TREE_EDITABLE_CELLS: u32 = 1920;
pub const ATTR_COLOR_PICKER_VALUE: u32 = 1921;
pub const ATTR_HORIZONTAL_BAR_VALUE: u32 = 1922;
pub const ATTR_HORIZONTAL_BAR_COLOR: u32 = 1923;
pub const ATTR_COLLAPSED_IMAGE_INDEX: u32 = 1931;
pub const ATTR_MARK_TYPE: u32 = 1950;
pub const ATTR_MARK_STATE: u32 = 1951;
pub const ATTR_SELECTED: u32 = 1952;
pub const ATTR_COLLAPSED: u32 = 1953;
pub const ATTR_NO_EDIT_LABEL: u32 = 1954;
pub const ATTR_ITEM_HEIGHT: u32 = 1955;
pub const ATTR_ITEM_ACTUAL_HEIGHT: u32 = 1956;
pub const ATTR_ENABLE_DRAG: u32 = 1957;
pub const ATTR_ENABLE_DROP: u32 = 1958;
pub const ATTR_IMAGE_INDEX: u32 = 1959;
pub const ATTR_HILITE_ONLY_WHEN_PANEL_ACTIVE: u32 = 1990;
pub const ATTR_TITLEBAR_STYLE: u32 = 1991;
pub const ATTR_ITEM_BITMAP: u32 = 1992;
pub const ATTR_DOUBLE_CLICK_TOGGLES_COLLAPSE: u32 = 1993;
pub const ATTR_TOP_RANGE: u32 = 2000;
pub const ATTR_BOTTOM_RANGE: u32 = 2001;
pub const ATTR_LEFT_RANGE: u32 = 2002;
pub const ATTR_RIGHT_RANGE: u32 = 2003;
pub const ATTR_SHOW_CONTENTS_WHILE_DRAGGING: u32 = 2004;
pub const ATTR_SPAN_PANEL: u32 = 2005;
pub const ATTR_OPERABLE_AS_INDICATOR: u32 = 2006;
pub const ATTR_TOP_ACTUAL_RANGE: u32 = 2007;
pub const ATTR_BOTTOM_ACTUAL_RANGE: u32 = 2008;
pub const ATTR_LEFT_ACTUAL_RANGE: u32 = 2009;
pub const ATTR_RIGHT_ACTUAL_RANGE: u32 = 2010;
pub const ATTR_DIGWAVEFORM_AUTOSIZE: u32 = 2100;
pub const ATTR_DIGWAVEFORM_LINE_LABEL: u32 = 2101;
pub const ATTR_DIGWAVEFORM_LINE_LABEL_LENGTH: u32 = 2102;
pub const ATTR_DIGWAVEFORM_BUS_LABEL: u32 = 2103;
pub const ATTR_DIGWAVEFORM_BUS_LABEL_LENGTH: u32 = 2104;
pub const ATTR_DIGWAVEFORM_FONT: u32 = 2105;
pub const ATTR_DIGWAVEFORM_FONT_NAME_LENGTH: u32 = 2106;
pub const ATTR_DIGWAVEFORM_SHOW_STATE_LABEL: u32 = 2107;
pub const ATTR_DIGWAVEFORM_EXPAND_BUSES: u32 = 2108;
pub const ATTR_DIGWAVEFORM_PLOT_COLOR: u32 = 2109;
pub const ATTR_TABS_FIT_MODE: u32 = 2200;
pub const ATTR_TABS_LOCATION: u32 = 2201;
pub const ATTR_TABS_VISIBLE: u32 = 2202;
pub const ATTR_TABS_START_OFFSET: u32 = 2203;
pub const ATTR_TABS_END_OFFSET: u32 = 2204;
pub const ATTR_TABS_MAX_TAB_WIDTH: u32 = 2205;
pub const ATTR_TABS_CLOSE_BUTTON_DIMMED: u32 = 2206;
pub const ATTR_TABS_CLOSE_BUTTON_VISIBLE: u32 = 2207;
pub const ATTR_NUM_ANNOTATIONS: u32 = 2300;
pub const ATTR_ANNOTATION_CAPTION: u32 = 2301;
pub const ATTR_ANNOTATION_CAPTION_LENGTH: u32 = 2302;
pub const ATTR_ANNOTATION_CAPTION_FONT: u32 = 2303;
pub const ATTR_ANNOTATION_CAPTION_FONT_NAME_LENGTH: u32 = 2304;
pub const ATTR_ANNOTATION_CAPTION_COLOR: u32 = 2305;
pub const ATTR_ANNOTATION_CAPTION_BGCOLOR: u32 = 2306;
pub const ATTR_ANNOTATION_CAPTION_BOLD: u32 = 2307;
pub const ATTR_ANNOTATION_CAPTION_ITALIC: u32 = 2308;
pub const ATTR_ANNOTATION_CAPTION_UNDERLINE: u32 = 2309;
pub const ATTR_ANNOTATION_CAPTION_STRIKEOUT: u32 = 2310;
pub const ATTR_ANNOTATION_CAPTION_POINT_SIZE: u32 = 2311;
pub const ATTR_ANNOTATION_CAPTION_ANGLE: u32 = 2312;
pub const ATTR_ANNOTATION_CAPTION_CHARACTER_SET: u32 = 2313;
pub const ATTR_ANNOTATION_GLYPH_STYLE: u32 = 2320;
pub const ATTR_ANNOTATION_GLYPH_COLOR: u32 = 2321;
pub const ATTR_ANNOTATION_LINE_STYLE: u32 = 2325;
pub const ATTR_ANNOTATION_LINE_COLOR: u32 = 2326;
pub const ATTR_ANNOTATION_ARROW_STYLE: u32 = 2327;
pub const ATTR_ANNOTATION_XVALUE: u32 = 2330;
pub const ATTR_ANNOTATION_YVALUE: u32 = 2331;
pub const ATTR_ANNOTATION_XOFFSET: u32 = 2332;
pub const ATTR_ANNOTATION_YOFFSET: u32 = 2333;
pub const ATTR_ANNOTATION_LOCKED: u32 = 2340;
pub const ATTR_ANNOTATION_XAXIS: u32 = 2341;
pub const ATTR_ANNOTATION_YAXIS: u32 = 2342;
pub const ATTR_ANNOTATION_VISIBLE: u32 = 2343;
pub const ATTR_ANNOTATION_HIDE_CAPTION: u32 = 2344;
pub const ATTR_ANNOTATION_CAPTION_ALWAYS_IN_VIEW: u32 = 2345;
pub const ATTR_ANNOTATION_OFFSET_MODE: u32 = 2350;
pub const ATTR_COLOR_RAMP_WIDTH: u32 = 2400;
pub const ATTR_COLOR_RAMP_INTERPOLATE: u32 = 2401;
pub const ATTR_NUM_COLOR_RAMP_VALUES: u32 = 2410;
pub const ATTR_XLABEL_FONT: u32 = 2500;
pub const ATTR_XLABEL_COLOR: u32 = 2501;
pub const ATTR_XLABEL_BOLD: u32 = 2502;
pub const ATTR_XLABEL_ANGLE: u32 = 2503;
pub const ATTR_XLABEL_ITALIC: u32 = 2504;
pub const ATTR_XLABEL_UNDERLINE: u32 = 2505;
pub const ATTR_XLABEL_STRIKEOUT: u32 = 2506;
pub const ATTR_XLABEL_POINT_SIZE: u32 = 2507;
pub const ATTR_XLABEL_FONT_NAME_LENGTH: u32 = 2508;
pub const ATTR_XLABEL_CHARACTER_SET: u32 = 2509;
pub const ATTR_YLABEL_FONT: u32 = 2510;
pub const ATTR_YLABEL_COLOR: u32 = 2511;
pub const ATTR_YLABEL_BOLD: u32 = 2512;
pub const ATTR_YLABEL_ANGLE: u32 = 2513;
pub const ATTR_YLABEL_ITALIC: u32 = 2514;
pub const ATTR_YLABEL_UNDERLINE: u32 = 2515;
pub const ATTR_YLABEL_STRIKEOUT: u32 = 2516;
pub const ATTR_YLABEL_POINT_SIZE: u32 = 2517;
pub const ATTR_YLABEL_FONT_NAME_LENGTH: u32 = 2518;
pub const ATTR_YLABEL_CHARACTER_SET: u32 = 2519;
pub const ATTR_NUM_PLOTS: u32 = 2520;
pub const ATTR_FIRST_PLOT: u32 = 2521;
pub const ATTR_NEXT_PLOT: u32 = 2522;
pub const ATTR_PLOT_TYPE: u32 = 2523;
pub const ATTR_USE_PROGRESS_BAR_VISUAL_STYLES: u32 = 2525;
pub const ATTR_ROW_OFFSET: u32 = 2526;
pub const ATTR_COLUMN_OFFSET: u32 = 2527;
pub const ATTR_ENCODING: u32 = 2528;
pub const VAL_CHAR: u32 = 0;
pub const VAL_INTEGER: u32 = 1;
pub const VAL_SHORT_INTEGER: u32 = 2;
pub const VAL_FLOAT: u32 = 3;
pub const VAL_DOUBLE: u32 = 4;
pub const VAL_STRING: u32 = 5;
pub const VAL_UNSIGNED_SHORT_INTEGER: u32 = 6;
pub const VAL_UNSIGNED_INTEGER: u32 = 7;
pub const VAL_UNSIGNED_CHAR: u32 = 8;
pub const VAL_64BIT_INTEGER: u32 = 9;
pub const VAL_UNSIGNED_64BIT_INTEGER: u32 = 10;
pub const VAL_NO_TYPE: u32 = 11;
pub const VAL_INTPTR_T: u32 = 12;
pub const VAL_UINTPTR_T: u32 = 13;
pub const VAL_SIZE_T: u32 = 13;
pub const VAL_SSIZE_T: u32 = 12;
pub const VAL_PTRDIFF_T: u32 = 12;
pub const VAL_AUTO_CENTER: i32 = -2147483648;
pub const VAL_RIGHT_ANCHOR: i32 = -2147483633;
pub const VAL_LEFT_ANCHOR: i32 = -2147483634;
pub const VAL_BOTTOM_ANCHOR: i32 = -2147483635;
pub const VAL_TOP_ANCHOR: i32 = -2147483636;
pub const VAL_AUTO_RANGE: i32 = -2147483637;
pub const VAL_NO_RANGE_LIMIT: i32 = -2147483638;
pub const VAL_KEEP_SAME_POSITION: i32 = -2147483647;
pub const VAL_INVALID_COORDINATE: i32 = -2147483648;
pub const VAL_TOP_LEFT_JUSTIFIED: u32 = 0;
pub const VAL_TOP_RIGHT_JUSTIFIED: u32 = 16;
pub const VAL_TOP_CENTER_JUSTIFIED: u32 = 32;
pub const VAL_BOTTOM_LEFT_JUSTIFIED: u32 = 64;
pub const VAL_BOTTOM_RIGHT_JUSTIFIED: u32 = 80;
pub const VAL_BOTTOM_CENTER_JUSTIFIED: u32 = 96;
pub const VAL_CENTER_LEFT_JUSTIFIED: u32 = 128;
pub const VAL_CENTER_RIGHT_JUSTIFIED: u32 = 144;
pub const VAL_CENTER_CENTER_JUSTIFIED: u32 = 160;
pub const VAL_LEFT_JUSTIFIED: u32 = 0;
pub const VAL_RIGHT_JUSTIFIED: u32 = 16;
pub const VAL_CENTER_JUSTIFIED: u32 = 32;
pub const VAL_RED: u32 = 16711680;
pub const VAL_GREEN: u32 = 65280;
pub const VAL_BLUE: u32 = 255;
pub const VAL_CYAN: u32 = 65535;
pub const VAL_MAGENTA: u32 = 16711935;
pub const VAL_YELLOW: u32 = 16776960;
pub const VAL_DK_RED: u32 = 8388608;
pub const VAL_DK_BLUE: u32 = 128;
pub const VAL_DK_GREEN: u32 = 32768;
pub const VAL_DK_CYAN: u32 = 32896;
pub const VAL_DK_MAGENTA: u32 = 8388736;
pub const VAL_DK_YELLOW: u32 = 8421376;
pub const VAL_LT_GRAY: u32 = 12632256;
pub const VAL_DK_GRAY: u32 = 8421504;
pub const VAL_BLACK: u32 = 0;
pub const VAL_WHITE: u32 = 16777215;
pub const VAL_PANEL_GRAY: u32 = 12632256;
pub const VAL_GRAY: u32 = 10526880;
pub const VAL_OFFWHITE: u32 = 14737632;
pub const VAL_TRANSPARENT: u32 = 16777216;
pub const VAL_MENU_FONT: &[u8; 7] = b"NIMenu\0";
pub const VAL_DIALOG_FONT: &[u8; 9] = b"NIDialog\0";
pub const VAL_EDITOR_FONT: &[u8; 9] = b"NIEditor\0";
pub const VAL_APP_FONT: &[u8; 6] = b"NIApp\0";
pub const VAL_MESSAGE_BOX_FONT: &[u8; 13] = b"NIMessageBox\0";
pub const VAL_MENU_META_FONT: &[u8; 15] = b"NIMenuMetaFont\0";
pub const VAL_DIALOG_META_FONT: &[u8; 17] = b"NIDialogMetaFont\0";
pub const VAL_EDITOR_META_FONT: &[u8; 17] = b"NIEditorMetaFont\0";
pub const VAL_APP_META_FONT: &[u8; 14] = b"NIAppMetaFont\0";
pub const VAL_MESSAGE_BOX_META_FONT: &[u8; 21] = b"NIMessageBoxMetaFont\0";
pub const VAL_7SEG_META_FONT: &[u8; 15] = b"NI7SegMetaFont\0";
pub const VAL_SYSTEM_META_FONT: &[u8; 17] = b"NISystemMetaFont\0";
pub const VAL_CHAR_WRAP: u32 = 1;
pub const VAL_LINE_WRAP: u32 = 2;
pub const VAL_WORD_WRAP: u32 = 4;
pub const VAL_FLOATING_PT_FORMAT: u32 = 65520;
pub const VAL_SCIENTIFIC_FORMAT: u32 = 65521;
pub const VAL_ENGINEERING_FORMAT: u32 = 65522;
pub const VAL_ABSOLUTE_TIME_FORMAT: u32 = 65523;
pub const VAL_RELATIVE_TIME_FORMAT: u32 = 65524;
pub const VAL_DECIMAL_FORMAT: u32 = 64;
pub const VAL_HEX_FORMAT: u32 = 66;
pub const VAL_OCTAL_FORMAT: u32 = 67;
pub const VAL_BINARY_FORMAT: u32 = 68;
pub const VAL_VKEY_BIT_POSITION: u32 = 8;
pub const VAL_MODIFIER_BIT_POSITION: u32 = 16;
pub const VAL_ASCII_KEY_MASK: u32 = 255;
pub const VAL_VKEY_MASK: u32 = 65280;
pub const VAL_MODIFIER_KEY_MASK: u32 = 16711680;
pub const VAL_SHIFT_MODIFIER: u32 = 65536;
pub const VAL_UNDERLINE_MODIFIER: u32 = 131072;
pub const VAL_MENUKEY_MODIFIER: u32 = 262144;
pub const VAL_SHIFT_AND_MENUKEY: u32 = 327680;
pub const VAL_FWD_DELETE_VKEY: u32 = 256;
pub const VAL_BACKSPACE_VKEY: u32 = 512;
pub const VAL_ESC_VKEY: u32 = 768;
pub const VAL_TAB_VKEY: u32 = 1024;
pub const VAL_ENTER_VKEY: u32 = 1280;
pub const VAL_UP_ARROW_VKEY: u32 = 1536;
pub const VAL_DOWN_ARROW_VKEY: u32 = 1792;
pub const VAL_LEFT_ARROW_VKEY: u32 = 2048;
pub const VAL_RIGHT_ARROW_VKEY: u32 = 2304;
pub const VAL_INSERT_VKEY: u32 = 2560;
pub const VAL_HOME_VKEY: u32 = 2816;
pub const VAL_END_VKEY: u32 = 3072;
pub const VAL_PAGE_UP_VKEY: u32 = 3328;
pub const VAL_PAGE_DOWN_VKEY: u32 = 3584;
pub const VAL_F1_VKEY: u32 = 3840;
pub const VAL_F2_VKEY: u32 = 4096;
pub const VAL_F3_VKEY: u32 = 4352;
pub const VAL_F4_VKEY: u32 = 4608;
pub const VAL_F5_VKEY: u32 = 4864;
pub const VAL_F6_VKEY: u32 = 5120;
pub const VAL_F7_VKEY: u32 = 5376;
pub const VAL_F8_VKEY: u32 = 5632;
pub const VAL_F9_VKEY: u32 = 5888;
pub const VAL_F10_VKEY: u32 = 6144;
pub const VAL_F11_VKEY: u32 = 6400;
pub const VAL_F12_VKEY: u32 = 6656;
pub const VAL_POPUP_MENUBAR_VKEY: u32 = 9472;
pub const VAL_POPUP_MENU_VKEY: u32 = 9984;
pub const VAL_COERCE: u32 = 0;
pub const VAL_IGNORE: u32 = 1;
pub const VAL_NOTIFY: u32 = 2;
pub const VAL_NO_FILL: u32 = 5;
pub const VAL_TOP_FILL: u32 = 2;
pub const VAL_BOTTOM_FILL: u32 = 1;
pub const VAL_RIGHT_FILL: u32 = 2;
pub const VAL_LEFT_FILL: u32 = 1;
pub const VAL_FILL_FROM_ZERO: u32 = 6;
pub const VAL_NO_MARKERS: u32 = 3;
pub const VAL_NO_INNER_MARKERS: u32 = 2;
pub const VAL_FULL_MARKERS: u32 = 1;
pub const VAL_NO_TICKS: u32 = 3;
pub const VAL_NO_MINOR_TICKS: u32 = 0;
pub const VAL_FULL_TICKS: u32 = 6;
pub const VAL_INDICATOR: u32 = 0;
pub const VAL_HOT: u32 = 1;
pub const VAL_NORMAL: u32 = 2;
pub const VAL_VALIDATE: u32 = 3;
pub const VAL_OUTLINED_FRAME: u32 = 1;
pub const VAL_BEVELLED_FRAME: u32 = 2;
pub const VAL_RAISED_FRAME: u32 = 3;
pub const VAL_HIDDEN_FRAME: u32 = 4;
pub const VAL_STEP_FRAME: u32 = 5;
pub const VAL_RAISED_OUTLINED_FRAME: u32 = 6;
pub const VAL_NO_ZOOM: u32 = 0;
pub const VAL_MINIMIZE: u32 = 1;
pub const VAL_MAXIMIZE: u32 = 2;
pub const VAL_FLOAT_NEVER: u32 = 0;
pub const VAL_FLOAT_APP_ACTIVE: u32 = 1;
pub const VAL_FLOAT_ALWAYS: i32 = -50;
pub const VAL_RAISED_EDGE: u32 = 1;
pub const VAL_FLAT_EDGE: u32 = 2;
pub const VAL_RECESSED_EDGE: u32 = 3;
pub const VAL_NO_IMAGE: u32 = 0;
pub const VAL_FOLDER: u32 = 1;
pub const VAL_OPEN_FOLDER: u32 = 2;
pub const VAL_CURRENT_FOLDER: u32 = 3;
pub const VAL_PLUS: u32 = 4;
pub const VAL_MINUS: u32 = 5;
pub const VAL_BLANK_IMAGE: u32 = 6;
pub const VAL_CHECK_MARK: u32 = 0;
pub const VAL_CHECK_BOX: u32 = 1;
pub const VAL_EMPTY_SQUARE: u32 = 0;
pub const VAL_SOLID_SQUARE: u32 = 1;
pub const VAL_ASTERISK: u32 = 2;
pub const VAL_DOTTED_EMPTY_SQUARE: u32 = 3;
pub const VAL_DOTTED_SOLID_SQUARE: u32 = 4;
pub const VAL_SOLID_DIAMOND: u32 = 5;
pub const VAL_EMPTY_SQUARE_WITH_X: u32 = 6;
pub const VAL_EMPTY_SQUARE_WITH_CROSS: u32 = 7;
pub const VAL_BOLD_X: u32 = 8;
pub const VAL_SMALL_SOLID_SQUARE: u32 = 9;
pub const VAL_SIMPLE_DOT: u32 = 10;
pub const VAL_EMPTY_CIRCLE: u32 = 11;
pub const VAL_SOLID_CIRCLE: u32 = 12;
pub const VAL_DOTTED_SOLID_CIRCLE: u32 = 13;
pub const VAL_DOTTED_EMPTY_CIRCLE: u32 = 14;
pub const VAL_BOLD_CROSS: u32 = 15;
pub const VAL_CROSS: u32 = 16;
pub const VAL_SMALL_CROSS: u32 = 17;
pub const VAL_X: u32 = 18;
pub const VAL_SMALL_X: u32 = 19;
pub const VAL_DOTTED_SOLID_DIAMOND: u32 = 20;
pub const VAL_EMPTY_DIAMOND: u32 = 21;
pub const VAL_DOTTED_EMPTY_DIAMOND: u32 = 22;
pub const VAL_SMALL_EMPTY_SQUARE: u32 = 23;
pub const VAL_NO_POINT: u32 = 24;
pub const VAL_THIN_LINE: u32 = 0;
pub const VAL_CONNECTED_POINTS: u32 = 1;
pub const VAL_SCATTER: u32 = 2;
pub const VAL_VERTICAL_BAR: u32 = 3;
pub const VAL_HORIZONTAL_BAR: u32 = 4;
pub const VAL_FAT_LINE: u32 = 5;
pub const VAL_THIN_STEP: u32 = 6;
pub const VAL_FAT_STEP: u32 = 7;
pub const VAL_BASE_ZERO_VERTICAL_BAR: u32 = 8;
pub const VAL_BASE_ZERO_HORIZONTAL_BAR: u32 = 9;
pub const VAL_SOLID: u32 = 0;
pub const VAL_DASH: u32 = 1;
pub const VAL_DOT: u32 = 2;
pub const VAL_DASH_DOT: u32 = 3;
pub const VAL_DASH_DOT_DOT: u32 = 4;
pub const VAL_LOWER_LEFT: u32 = 1;
pub const VAL_CENTER_LEFT: u32 = 2;
pub const VAL_UPPER_LEFT: u32 = 3;
pub const VAL_LOWER_CENTER: u32 = 4;
pub const VAL_CENTER: u32 = 5;
pub const VAL_UPPER_CENTER: u32 = 6;
pub const VAL_LOWER_RIGHT: u32 = 7;
pub const VAL_CENTER_RIGHT: u32 = 8;
pub const VAL_UPPER_RIGHT: u32 = 9;
pub const VAL_PLOT_X: u32 = 0;
pub const VAL_PLOT_Y: u32 = 1;
pub const VAL_PLOT_XY: u32 = 2;
pub const VAL_PLOT_WAVEFORM: u32 = 3;
pub const VAL_PLOT_POINT: u32 = 4;
pub const VAL_PLOT_TEXT: u32 = 5;
pub const VAL_PLOT_LINE: u32 = 6;
pub const VAL_PLOT_RECTANGLE: u32 = 7;
pub const VAL_PLOT_POLYGON: u32 = 8;
pub const VAL_PLOT_OVAL: u32 = 9;
pub const VAL_PLOT_ARC: u32 = 10;
pub const VAL_PLOT_INTENSITY: u32 = 11;
pub const VAL_PLOT_SCALED_INTENSITY: u32 = 12;
pub const VAL_PLOT_BITMAP: u32 = 13;
pub const VAL_LINEAR: u32 = 0;
pub const VAL_LOG: u32 = 1;
pub const VAL_AUTO: i32 = -1;
pub const VAL_RETAIN: u32 = 0;
pub const VAL_DISCARD: u32 = 1;
pub const VAL_FREE_FORM: u32 = 0;
pub const VAL_SNAP_TO_POINT: u32 = 1;
pub const VAL_NONE: u32 = 0;
pub const VAL_ARROW: u32 = 1;
pub const VAL_EMPTY_TRIANGLE: u32 = 2;
pub const VAL_FILLED_TRIANGLE: u32 = 3;
pub const VAL_LONG_ARROW: u32 = 4;
pub const VAL_LONG_EMPTY_TRIANGLE: u32 = 5;
pub const VAL_LONG_FILLED_TRIANGLE: u32 = 6;
pub const VAL_GLYPH_OFFSET: u32 = 0;
pub const VAL_TOP_LEFT_OFFSET: u32 = 1;
pub const VAL_INTERLEAVED: u32 = 0;
pub const VAL_NON_INTERLEAVED: u32 = 1;
pub const VAL_SINGLE_LINE: u32 = 0;
pub const VAL_LONG_CROSS: u32 = 0;
pub const VAL_VERTICAL_LINE: u32 = 1;
pub const VAL_HORIZONTAL_LINE: u32 = 2;
pub const VAL_NO_CROSS: u32 = 3;
pub const VAL_SHORT_CROSS: u32 = 4;
pub const VAL_SWEEP: u32 = 0;
pub const VAL_CONTINUOUS: u32 = 1;
pub const VAL_BLOCK: u32 = 2;
pub const VAL_NO_CHANGE: i32 = -1;
pub const VAL_MANUAL: u32 = 0;
pub const VAL_AUTOSCALE: u32 = 1;
pub const VAL_LOCK: u32 = 2;
pub const VAL_DELAYED_DRAW: u32 = 0;
pub const VAL_IMMEDIATE_DRAW: u32 = 1;
pub const VAL_NO_DRAW: u32 = 2;
pub const VAL_DEFAULT_CURSOR: i32 = -1;
pub const VAL_CHECK_CURSOR: u32 = 11;
pub const VAL_CROSS_HAIR_CURSOR: u32 = 12;
pub const VAL_BOX_CURSOR: u32 = 13;
pub const VAL_POINTING_FINGER_CURSOR: u32 = 14;
pub const VAL_OPEN_HAND_CURSOR: u32 = 15;
pub const VAL_QUESTION_MARK_CURSOR: u32 = 16;
pub const VAL_HOUR_GLASS_CURSOR: u32 = 17;
pub const VAL_HIDDEN_CURSOR: u32 = 18;
pub const VAL_SIZE_EW_CURSOR: u32 = 19;
pub const VAL_SIZE_NS_CURSOR: u32 = 20;
pub const VAL_SIZE_NW_SE_CURSOR: u32 = 21;
pub const VAL_SIZE_NE_SW_CURSOR: u32 = 22;
pub const VAL_CLOSED_HAND_CURSOR: u32 = 23;
pub const VAL_SIZE_EW_CURSOR_2: u32 = 26;
pub const VAL_SIZE_NS_CURSOR_2: u32 = 27;
pub const VAL_MOVE_CURSOR: u32 = 28;
pub const VAL_ZOOM_AROUND_PT: u32 = 0;
pub const VAL_ZOOM_TO_RECT: u32 = 1;
pub const VAL_ZOOM_XAXIS: u32 = 2;
pub const VAL_ZOOM_YAXIS: u32 = 3;
pub const VAL_NO_SCROLL_BARS: u32 = 0;
pub const VAL_HORIZ_SCROLL_BAR: u32 = 1;
pub const VAL_VERT_SCROLL_BAR: u32 = 2;
pub const VAL_BOTH_SCROLL_BARS: u32 = 3;
pub const VAL_SMALL_SCROLL_BARS: u32 = 8;
pub const VAL_MEDIUM_SCROLL_BARS: u32 = 12;
pub const VAL_LARGE_SCROLL_BARS: u32 = 16;
pub const VAL_ALWAYS_AUTO_SIZE: u32 = 0;
pub const VAL_GROW_ONLY: u32 = 1;
pub const VAL_SHRINK_ONLY: u32 = 2;
pub const VAL_NEVER_AUTO_SIZE: u32 = 3;
pub const VAL_TOO_MANY_COPIES: u32 = 1;
pub const VAL_NO_MULTIPLE_COPIES: u32 = 2;
pub const VAL_NO_DUPLEX: u32 = 4;
pub const VAL_NO_LANDSCAPE: u32 = 8;
pub const VAL_CANT_FORCE_MONO: u32 = 16;
pub const VAL_NO_SUCH_XRESOLUTION: u32 = 32;
pub const VAL_NO_MULTIPLE_XRESOLUTIONS: u32 = 64;
pub const VAL_NO_SUCH_YRESOLUTION: u32 = 128;
pub const VAL_NO_MULTIPLE_YRESOLUTIONS: u32 = 256;
pub const VAL_NO_SEPARATE_YRESOLUTION: u32 = 512;
pub const VAL_USER_CANCEL: u32 = 1024;
pub const VAL_GENERIC_POPUP_NO_CTRL: u32 = 0;
pub const VAL_GENERIC_POPUP_BTN1: u32 = 1;
pub const VAL_GENERIC_POPUP_BTN2: u32 = 2;
pub const VAL_GENERIC_POPUP_BTN3: u32 = 3;
pub const VAL_GENERIC_POPUP_INPUT_STRING: u32 = 4;
pub const VAL_CLASSIC: u32 = 0;
pub const VAL_LAB_STYLE: u32 = 1;
pub const VAL_WINDOWS_STYLE: u32 = 2;
pub const VAL_SIZE_TO_IMAGE: u32 = 0;
pub const VAL_SIZE_TO_PICTURE: u32 = 1;
pub const VAL_PICT_CORNER: u32 = 2;
pub const VAL_PICT_CENTER: u32 = 3;
pub const VAL_PICT_TILE: u32 = 4;
pub const VAL_FULL_PANEL: u32 = 0;
pub const VAL_VISIBLE_AREA: u32 = 1;
pub const VAL_OK_BUTTON: u32 = 0;
pub const VAL_SAVE_BUTTON: u32 = 1;
pub const VAL_SELECT_BUTTON: u32 = 2;
pub const VAL_LOAD_BUTTON: u32 = 3;
pub const VAL_NO_FILE_SELECTED: u32 = 0;
pub const VAL_EXISTING_FILE_SELECTED: u32 = 1;
pub const VAL_NEW_FILE_SELECTED: u32 = 2;
pub const VAL_NO_DIRECTORY_SELECTED: u32 = 0;
pub const VAL_DIRECTORY_SELECTED: u32 = 1;
pub const VAL_PORTRAIT: u32 = 1;
pub const VAL_LANDSCAPE: u32 = 2;
pub const VAL_BW: u32 = 0;
pub const VAL_GRAYSCALE: u32 = 1;
pub const VAL_COLOR: u32 = 2;
pub const VAL_SIMPLEX: u32 = 1;
pub const VAL_VERTDUPLEX: u32 = 2;
pub const VAL_HORIZDUPLEX: u32 = 3;
pub const VAL_USE_ENTIRE_PAPER: i32 = -1;
pub const VAL_INTEGRAL_SCALE: u32 = 0;
pub const VAL_CENTER_ON_PAPER: i32 = -1;
pub const VAL_USE_PRINTER_SETTING: i32 = -1;
pub const VAL_SLEEP_NONE: u32 = 1;
pub const VAL_SLEEP_SOME: u32 = 2;
pub const VAL_SLEEP_MORE: u32 = 3;
pub const VAL_BOTTOM_XAXIS: u32 = 0;
pub const VAL_LEFT_YAXIS: u32 = 1;
pub const VAL_RIGHT_YAXIS: u32 = 2;
pub const VAL_TOP_XAXIS: u32 = 3;
pub const VAL_COPY_MODE: u32 = 1;
pub const VAL_OR_MODE: u32 = 2;
pub const VAL_XOR_MODE: u32 = 3;
pub const VAL_AND_NOT_MODE: u32 = 4;
pub const VAL_NOT_COPY_MODE: u32 = 5;
pub const VAL_OR_NOT_MODE: u32 = 6;
pub const VAL_NOT_XOR_MODE: u32 = 7;
pub const VAL_AND_MODE: u32 = 8;
pub const VAL_DRAW_ON_TOP: u32 = 1;
pub const VAL_DEFER_DRAWING: u32 = 2;
pub const VAL_UPDATE_IMMEDIATELY: u32 = 1;
pub const VAL_MARK_FOR_UPDATE: u32 = 2;
pub const VAL_DIRECT_TO_SCREEN: u32 = 3;
pub const VAL_DRAW_FRAME: u32 = 1;
pub const VAL_DRAW_INTERIOR: u32 = 2;
pub const VAL_DRAW_FRAME_AND_INTERIOR: u32 = 3;
pub const VAL_TO_EDGE: i32 = -1;
pub const VAL_KEEP_SAME_SIZE: i32 = -2;
pub const VAL_USE_PANEL_SETTING: i32 = -1;
pub const VAL_GRID: u32 = 0;
pub const VAL_COLUMN: u32 = 1;
pub const VAL_ROW: u32 = 2;
pub const VAL_SELECT_STATE: u32 = 0;
pub const VAL_EDIT_STATE: u32 = 1;
pub const VAL_CELL_NUMERIC: u32 = 0;
pub const VAL_CELL_STRING: u32 = 1;
pub const VAL_CELL_PICTURE: u32 = 2;
pub const VAL_CELL_RING: u32 = 3;
pub const VAL_CELL_COMBO_BOX: u32 = 4;
pub const VAL_CELL_BUTTON: u32 = 5;
pub const VAL_CELL_CHECK_BOX: u32 = 6;
pub const VAL_CELL_COLOR_PICKER: u32 = 7;
pub const VAL_CELL_HORIZONTAL_BAR: u32 = 8;
pub const VAL_USE_MASTER_CELL_TYPE: i32 = -1;
pub const VAL_TEXT_CELL_TYPE: i32 = -2;
pub const VAL_ROW_MAJOR: u32 = 0;
pub const VAL_COLUMN_MAJOR: u32 = 1;
pub const VAL_USE_EXPLICIT_SIZE: u32 = 0;
pub const VAL_SIZE_TO_CELL_TEXT: u32 = 1;
pub const VAL_SIZE_TO_CELL_IMAGE: u32 = 2;
pub const VAL_SIZE_TO_CELL_IMAGE_AND_TEXT: u32 = 3;
pub const VAL_SIZE_TO_CELL_FONT: u32 = 1;
pub const VAL_SIZE_TO_CELL_IMAGE_AND_FONT: u32 = 3;
pub const VAL_NEXT: i32 = -1;
pub const VAL_NEXT_PLUS_SELF: i32 = -2;
pub const VAL_PREV: i32 = -3;
pub const VAL_PREV_PLUS_SELF: i32 = -4;
pub const VAL_FIRST: i32 = -5;
pub const VAL_LAST: i32 = -6;
pub const VAL_SIBLING: i32 = -7;
pub const VAL_CHILD: i32 = -8;
pub const VAL_ALL: i32 = -9;
pub const VAL_DESCENDENT: i32 = -10;
pub const VAL_ANCESTOR: i32 = -11;
pub const VAL_MARK_NONE: u32 = 0;
pub const VAL_MARK_CHECK: u32 = 1;
pub const VAL_MARK_RADIO: u32 = 2;
pub const VAL_MARK_OFF: u32 = 0;
pub const VAL_MARK_ON: u32 = 1;
pub const VAL_MARK_PARTIAL: u32 = 2;
pub const VAL_SELECTION_NONE: u32 = 0;
pub const VAL_SELECTION_SINGLE: u32 = 1;
pub const VAL_SELECTION_MULTIPLE: u32 = 2;
pub const VAL_NO_SELECTION_EFFECT: u32 = 0;
pub const VAL_TOGGLE_SELECTION_OF_ITEM: u32 = 1;
pub const VAL_ADD_ITEM_TO_SELECTION: u32 = 2;
pub const VAL_ADD_INTERVAL_TO_SELECTION: u32 = 3;
pub const VAL_REPLACE_SELECTION_WITH_ITEM: u32 = 4;
pub const VAL_SELECTED: u32 = 1;
pub const VAL_UNSELECTED: u32 = 2;
pub const VAL_EXPOSED: u32 = 4;
pub const VAL_UNEXPOSED: u32 = 8;
pub const VAL_MARKED: u32 = 16;
pub const VAL_UNMARKED: u32 = 32;
pub const VAL_PARTIALLY_MARKED: u32 = 64;
pub const VAL_EXPANDED: u32 = 128;
pub const VAL_COLLAPSED: u32 = 256;
pub const VAL_LEAF: u32 = 512;
pub const VAL_NON_LEAF: u32 = 1024;
pub const VAL_OTHER_AREA: u32 = 0;
pub const VAL_ITEM_PLUS_MINUS_AREA: u32 = 1;
pub const VAL_ITEM_MARK_AREA: u32 = 2;
pub const VAL_ITEM_IMAGE_AREA: u32 = 3;
pub const VAL_ITEM_LABEL_AREA: u32 = 4;
pub const VAL_COLUMN_LABEL_AREA: u32 = 5;
pub const VAL_CELL_AREA: u32 = 6;
pub const VAL_COLUMN_SIZE_AREA: u32 = 7;
pub const VAL_GRID_COLUMN_SIZE_AREA: u32 = 8;
pub const VAL_VSCROLL_AREA: u32 = 9;
pub const VAL_HSCROLL_AREA: u32 = 10;
pub const VAL_TAB_AREA: u32 = 11;
pub const VAL_TAB_PAGE_AREA: u32 = 12;
pub const VAL_TAB_SCROLL_NEXT_AREA: u32 = 13;
pub const VAL_TAB_SCROLL_PREV_AREA: u32 = 14;
pub const VAL_BEFORE_FIRST_TAB_AREA: u32 = 15;
pub const VAL_AFTER_LAST_TAB_AREA: u32 = 16;
pub const VAL_CELL_MENU_ARROW_AREA: u32 = 17;
pub const VAL_CELL_BUTTON_AREA: u32 = 18;
pub const VAL_CELL_CHECK_BOX_AREA: u32 = 19;
pub const VAL_CELL_COLOR_PICKER_AREA: u32 = 20;
pub const VAL_TAB_CLOSE_PAGE_AREA: u32 = 24;
pub const VAL_SINGLE_ROW: u32 = 0;
pub const VAL_SINGLE_ROW_JUSTIFY: u32 = 1;
pub const VAL_SINGLE_ROW_SCROLL: u32 = 2;
pub const VAL_MULTIPLE_ROWS: u32 = 3;
pub const VAL_TOP_LEFT: u32 = 0;
pub const VAL_TOP_RIGHT: u32 = 1;
pub const VAL_BOTTOM_LEFT: u32 = 2;
pub const VAL_BOTTOM_RIGHT: u32 = 3;
pub const VAL_RIGHT_TOP: u32 = 4;
pub const VAL_RIGHT_BOTTOM: u32 = 5;
pub const VAL_LEFT_TOP: u32 = 6;
pub const VAL_LEFT_BOTTOM: u32 = 7;
pub const VAL_DEFAULT_IMAGE: i32 = -1;
pub const VAL_GOTO: i32 = -2;
pub const VAL_FIND: i32 = -3;
pub const VAL_SEARCH: i32 = -3;
pub const VAL_SORT: i32 = -4;
pub const VAL_EXPAND_SUBTREE: i32 = -5;
pub const VAL_COLLAPSE_SUBTREE: i32 = -6;
pub const VAL_EXPAND_ALL: i32 = -7;
pub const VAL_COLLAPSE_ALL: i32 = -8;
pub const VAL_PLOT_COLOR: i32 = -9;
pub const VAL_PLOT_STYLE: i32 = -10;
pub const VAL_PLOT_POINT_STYLE: i32 = -11;
pub const VAL_PLOT_LINE_STYLE: i32 = -12;
pub const VAL_PLOT_BGCOLOR: i32 = -13;
pub const VAL_PLOT_ORIGIN: i32 = -14;
pub const VAL_PLOT_FONT: i32 = -15;
pub const VAL_PLOT_FILL_COLOR: i32 = -16;
pub const VAL_PLOT_VISIBLE: i32 = -17;
pub const VAL_PLOT_RENAME: i32 = -18;
pub const VAL_PLOT_LINE_THICKNESS: i32 = -19;
pub const VAL_FIND_NEXT: i32 = -20;
pub const VAL_FIND_PREV: i32 = -21;
pub const VAL_USE_PERIOD: u32 = 0;
pub const VAL_USE_SYSTEM_SETTING: u32 = 1;
pub const VAL_ANSI_ENCODING: u32 = 0;
pub const VAL_UTF8_ENCODING: u32 = 1;
pub const VAL_NATIVE_CHARSET: i32 = -1;
pub const VAL_ANSI_CHARSET: u32 = 0;
pub const VAL_SYMBOL_CHARSET: u32 = 2;
pub const VAL_SHIFTJIS_CHARSET: u32 = 128;
pub const VAL_HANGUL_CHARSET: u32 = 129;
pub const VAL_GB2312_CHARSET: u32 = 134;
pub const VAL_CHINESEBIG5_CHARSET: u32 = 136;
pub const VAL_HEBREW_CHARSET: u32 = 177;
pub const VAL_ARABIC_CHARSET: u32 = 178;
pub const VAL_GREEK_CHARSET: u32 = 161;
pub const VAL_TURKISH_CHARSET: u32 = 162;
pub const VAL_VIETNAMESE_CHARSET: u32 = 163;
pub const VAL_THAI_CHARSET: u32 = 222;
pub const VAL_EASTEUROPE_CHARSET: u32 = 238;
pub const VAL_RUSSIAN_CHARSET: u32 = 204;
pub const VAL_MAC_CHARSET: u32 = 77;
pub const VAL_BALTIC_CHARSET: u32 = 186;
pub const VAL_OEM_CHARSET: u32 = 255;
pub const VAL_DS_WRITE: u32 = 1;
pub const VAL_DS_READ: u32 = 2;
pub const VAL_ALL_OBJECTS: i32 = -1;
pub const VAL_DFLT_FOR_NEW_OBJECTS: i32 = -2;
pub const JPEG_INTERLACE: u32 = 1073741824;
pub const JPEG_PROGRESSIVE: u32 = 1073741824;
pub const JPEG_DCTFAST: u32 = 536870912;
pub const JPEG_DCTSLOW: u32 = 268435456;
pub const JPEG_DCTFLOAT: u32 = 0;
pub const VAL_CURSOR: u32 = 1;
pub const VAL_ANNOTATION: u32 = 2;
pub const EVENT_NONE: u32 = 0;
pub const EVENT_COMMIT: u32 = 1;
pub const EVENT_VAL_CHANGED: u32 = 2;
pub const EVENT_LEFT_CLICK: u32 = 3;
pub const EVENT_LEFT_DOUBLE_CLICK: u32 = 4;
pub const EVENT_RIGHT_CLICK: u32 = 5;
pub const EVENT_RIGHT_DOUBLE_CLICK: u32 = 6;
pub const EVENT_KEYPRESS: u32 = 7;
pub const EVENT_GOT_FOCUS: u32 = 8;
pub const EVENT_LOST_FOCUS: u32 = 9;
pub const EVENT_IDLE: u32 = 10;
pub const EVENT_CLOSE: u32 = 11;
pub const EVENT_PANEL_SIZE: u32 = 12;
pub const EVENT_PANEL_MOVE: u32 = 13;
pub const EVENT_END_TASK: u32 = 14;
pub const EVENT_TIMER_TICK: u32 = 15;
pub const EVENT_DISCARD: u32 = 16;
pub const EVENT_EXPAND: u32 = 17;
pub const EVENT_COLLAPSE: u32 = 18;
pub const EVENT_DRAG: u32 = 19;
pub const EVENT_DROP: u32 = 20;
pub const EVENT_DROPPED: u32 = 21;
pub const EVENT_SORT: u32 = 22;
pub const EVENT_SELECTION_CHANGE: u32 = 23;
pub const EVENT_HSCROLL: u32 = 24;
pub const EVENT_VSCROLL: u32 = 25;
pub const EVENT_MARK_STATE_CHANGE: u32 = 26;
pub const EVENT_COMBO_BOX_INSERT: u32 = 27;
pub const EVENT_ACTIVE_CELL_CHANGE: u32 = 28;
pub const EVENT_ROW_SIZE_CHANGE: u32 = 29;
pub const EVENT_COLUMN_SIZE_CHANGE: u32 = 30;
pub const EVENT_ACTIVE_TAB_CHANGE: u32 = 31;
pub const EVENT_EDIT_MODE_STATE_CHANGE: u32 = 32;
pub const EVENT_MOUSE_POINTER_MOVE: u32 = 33;
pub const EVENT_LEFT_CLICK_UP: u32 = 34;
pub const EVENT_RIGHT_CLICK_UP: u32 = 35;
pub const EVENT_MOUSE_WHEEL_SCROLL: u32 = 36;
pub const EVENT_PANEL_SIZING: u32 = 37;
pub const EVENT_PANEL_MOVING: u32 = 38;
pub const EVENT_RADIX_CHANGE: u32 = 39;
pub const EVENT_ZOOM: u32 = 40;
pub const EVENT_AXIS_VAL_CHANGE: u32 = 41;
pub const EVENT_INTERACTIVE_LEGEND: u32 = 42;
pub const EVENT_TABLE_ROW_COL_LABEL_CLICK: u32 = 43;
pub const EVENT_BEGIN_EDIT_TREE_CELL: u32 = 44;
pub const EVENT_TREE_CELL_COMMIT: u32 = 45;
pub const EVENT_TREE_CELL_BEGIN_MENU: u32 = 46;
pub const EVENT_TREE_CELL_ACTIVE_ITEM_CHANGE: u32 = 47;
pub const EVENT_TREE_CELL_VAL_CHANGED: u32 = 48;
pub const EVENT_CTRL_MENU: u32 = 49;
pub const EVENT_DROP_COPY: u32 = 50;
pub const EVENT_VAL_COERCED: u32 = 51;
pub const EVENT_PANEL_MINIMIZE: u32 = 52;
pub const EVENT_PANEL_MAXIMIZE: u32 = 53;
pub const EVENT_PANEL_RESTORE: u32 = 54;
pub const EVENT_RING_BEGIN_MENU: u32 = 55;
pub const EVENT_TAB_PAGE_CLOSE: u32 = 56;
pub const EVENT_MOUSE_WHEEL_CLICK: u32 = 57;
pub const MARK_STATE_CHANGE: u32 = 0;
pub const LABEL_CHANGE: u32 = 1;
pub const LEFT_DOUBLE_CLICK: u32 = 2;
pub const ENTER_KEY: u32 = 3;
pub const ACTIVE_ITEM_CHANGE: u32 = 4;
pub const COLUMN_LABEL_CLICK: u32 = 5;
pub const MOUSE_WHEEL_PAGE_UP: u32 = 0;
pub const MOUSE_WHEEL_PAGE_DOWN: u32 = 1;
pub const MOUSE_WHEEL_SCROLL_UP: u32 = 2;
pub const MOUSE_WHEEL_SCROLL_DOWN: u32 = 3;
pub const MOUSE_WHEEL_SCROLL_LEFT: u32 = 4;
pub const MOUSE_WHEEL_SCROLL_RIGHT: u32 = 5;
pub const PANEL_SIZING_TOPLEFT: u32 = 1;
pub const PANEL_SIZING_TOP: u32 = 2;
pub const PANEL_SIZING_TOPRIGHT: u32 = 3;
pub const PANEL_SIZING_RIGHT: u32 = 4;
pub const PANEL_SIZING_BOTTOMRIGHT: u32 = 5;
pub const PANEL_SIZING_BOTTOM: u32 = 6;
pub const PANEL_SIZING_BOTTOMLEFT: u32 = 7;
pub const PANEL_SIZING_LEFT: u32 = 8;
pub const ZOOM_IN: u32 = 1;
pub const ZOOM_OUT: u32 = 2;
pub const ZOOM_PAN: u32 = 3;
pub const ZOOM_RESTORE: u32 = 4;
pub const APP_CLOSE: u32 = 0;
pub const SYSTEM_CLOSE: u32 = 1;
pub const TIF_COMPRESSION_NONE: u32 = 0;
pub const TIF_COMPRESSION_RLE: u32 = 1;
pub const TIF_COMPRESSION_JPEG: u32 = 2;
pub const TIF_COMPRESSION_ZIP: u32 = 3;
pub const ATTR_ANTI_ALIASED_PLOTS: u32 = 1156;
pub const ATTR_PAPER_HEIGHT: u32 = 1301;
pub const ATTR_PAPER_WIDTH: u32 = 1302;
pub const ATTR_INNER_LOG_MARKERS_VISIBLE: u32 = 1120;
pub const VAL_USE_PRINTER_DEFAULT: i32 = -1;
pub const VAL_XAXIS: u32 = 0;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
unsafe extern "C" {
	pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
}
pub type rsize_t = usize;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
	_unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
	pub locinfo: pthreadlocinfo,
	pub mbcinfo: pthreadmbcinfo,
}
// #[test]
fn bindgen_test_layout_localeinfo_struct() {
	const UNINIT: ::std::mem::MaybeUninit<localeinfo_struct> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<localeinfo_struct>(),
		16usize,
		concat!("Size of: ", stringify!(localeinfo_struct))
	);
	assert_eq!(
		::std::mem::align_of::<localeinfo_struct>(),
		8usize,
		concat!("Alignment of ", stringify!(localeinfo_struct))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(localeinfo_struct),
			"::",
			stringify!(locinfo)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(localeinfo_struct),
			"::",
			stringify!(mbcinfo)
		)
	);
}
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
	pub wLanguage: ::std::os::raw::c_ushort,
	pub wCountry: ::std::os::raw::c_ushort,
	pub wCodePage: ::std::os::raw::c_ushort,
}
// #[test]
fn bindgen_test_layout_tagLC_ID() {
	const UNINIT: ::std::mem::MaybeUninit<tagLC_ID> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<tagLC_ID>(),
		6usize,
		concat!("Size of: ", stringify!(tagLC_ID))
	);
	assert_eq!(
		::std::mem::align_of::<tagLC_ID>(),
		2usize,
		concat!("Alignment of ", stringify!(tagLC_ID))
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).wLanguage) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(tagLC_ID),
			"::",
			stringify!(wLanguage)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).wCountry) as usize - ptr as usize
		},
		2usize,
		concat!(
			"Offset of field: ",
			stringify!(tagLC_ID),
			"::",
			stringify!(wCountry)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).wCodePage) as usize - ptr as usize
		},
		4usize,
		concat!(
			"Offset of field: ",
			stringify!(tagLC_ID),
			"::",
			stringify!(wCodePage)
		)
	);
}
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
	pub _locale_pctype: *const ::std::os::raw::c_ushort,
	pub _locale_mb_cur_max: ::std::os::raw::c_int,
	pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
// #[test]
fn bindgen_test_layout_threadlocaleinfostruct() {
	const UNINIT: ::std::mem::MaybeUninit<threadlocaleinfostruct> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<threadlocaleinfostruct>(),
		16usize,
		concat!("Size of: ", stringify!(threadlocaleinfostruct))
	);
	assert_eq!(
		::std::mem::align_of::<threadlocaleinfostruct>(),
		8usize,
		concat!("Alignment of ", stringify!(threadlocaleinfostruct))
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(threadlocaleinfostruct),
			"::",
			stringify!(_locale_pctype)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize
				- ptr as usize
		},
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(threadlocaleinfostruct),
			"::",
			stringify!(_locale_mb_cur_max)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize
				- ptr as usize
		},
		12usize,
		concat!(
			"Offset of field: ",
			stringify!(threadlocaleinfostruct),
			"::",
			stringify!(_locale_lc_codepage)
		)
	);
}
pub type threadlocinfo = threadlocaleinfostruct;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type int_least32_t = ::std::os::raw::c_int;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type HINSTANCE = *mut ::std::os::raw::c_void;
pub type BOOL = ::std::os::raw::c_int;
pub type DWORD = ::std::os::raw::c_ulong;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type LPSTR = *mut ::std::os::raw::c_char;
pub type HANDLE = *mut ::std::os::raw::c_void;
unsafe extern "C" {
	pub fn InitCVIRTEEx(
		hInstance: *mut ::std::os::raw::c_void,
		argv: *mut *mut ::std::os::raw::c_char,
		reserved: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CVIRTEHasBeenDetached() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CloseCVIRTE();
}
pub type KeyCodeUnicode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ColorMapEntry {
	pub dataValue: ColorMapEntry__bindgen_ty_1,
	pub color: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ColorMapEntry__bindgen_ty_1 {
	pub valChar: ::std::os::raw::c_char,
	pub valInt: ::std::os::raw::c_int,
	pub valInt64: ::std::os::raw::c_longlong,
	pub valShort: ::std::os::raw::c_short,
	pub valFloat: f32,
	pub valDouble: f64,
	pub valUChar: ::std::os::raw::c_uchar,
	pub valULong: ::std::os::raw::c_ulong,
	pub valUInt64: ::std::os::raw::c_ulonglong,
	pub valUShort: ::std::os::raw::c_ushort,
}
// #[test]
fn bindgen_test_layout_ColorMapEntry__bindgen_ty_1() {
	const UNINIT: ::std::mem::MaybeUninit<ColorMapEntry__bindgen_ty_1> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<ColorMapEntry__bindgen_ty_1>(),
		8usize,
		concat!("Size of: ", stringify!(ColorMapEntry__bindgen_ty_1))
	);
	assert_eq!(
		::std::mem::align_of::<ColorMapEntry__bindgen_ty_1>(),
		4usize,
		concat!("Alignment of ", stringify!(ColorMapEntry__bindgen_ty_1))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).valChar) as usize - ptr as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valChar)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).valInt) as usize - ptr as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valInt)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).valInt64) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valInt64)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).valShort) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valShort)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).valFloat) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valFloat)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).valDouble) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valDouble)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).valUChar) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valUChar)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).valULong) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valULong)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).valUInt64) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valUInt64)
		)
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).valUShort) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry__bindgen_ty_1),
			"::",
			stringify!(valUShort)
		)
	);
}
// #[test]
fn bindgen_test_layout_ColorMapEntry() {
	const UNINIT: ::std::mem::MaybeUninit<ColorMapEntry> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<ColorMapEntry>(),
		12usize,
		concat!("Size of: ", stringify!(ColorMapEntry))
	);
	assert_eq!(
		::std::mem::align_of::<ColorMapEntry>(),
		4usize,
		concat!("Alignment of ", stringify!(ColorMapEntry))
	);
	assert_eq!(
		unsafe {
			::std::ptr::addr_of!((*ptr).dataValue) as usize - ptr as usize
		},
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry),
			"::",
			stringify!(dataValue)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(ColorMapEntry),
			"::",
			stringify!(color)
		)
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect {
	pub top: ::std::os::raw::c_int,
	pub left: ::std::os::raw::c_int,
	pub height: ::std::os::raw::c_int,
	pub width: ::std::os::raw::c_int,
}
// #[test]
fn bindgen_test_layout_Rect() {
	const UNINIT: ::std::mem::MaybeUninit<Rect> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<Rect>(),
		16usize,
		concat!("Size of: ", stringify!(Rect))
	);
	assert_eq!(
		::std::mem::align_of::<Rect>(),
		4usize,
		concat!("Alignment of ", stringify!(Rect))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(Rect), "::", stringify!(top))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
		4usize,
		concat!("Offset of field: ", stringify!(Rect), "::", stringify!(left))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(Rect),
			"::",
			stringify!(height)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
		12usize,
		concat!("Offset of field: ", stringify!(Rect), "::", stringify!(width))
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
	pub x: ::std::os::raw::c_int,
	pub y: ::std::os::raw::c_int,
}
// #[test]
fn bindgen_test_layout_Point() {
	const UNINIT: ::std::mem::MaybeUninit<Point> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<Point>(),
		8usize,
		concat!("Size of: ", stringify!(Point))
	);
	assert_eq!(
		::std::mem::align_of::<Point>(),
		4usize,
		concat!("Alignment of ", stringify!(Point))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
		0usize,
		concat!("Offset of field: ", stringify!(Point), "::", stringify!(x))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
		4usize,
		concat!("Offset of field: ", stringify!(Point), "::", stringify!(y))
	);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
	pub Data1: ::std::os::raw::c_ulong,
	pub Data2: ::std::os::raw::c_ushort,
	pub Data3: ::std::os::raw::c_ushort,
	pub Data4: [::std::os::raw::c_uchar; 8usize],
}
// #[test]
fn bindgen_test_layout__GUID() {
	const UNINIT: ::std::mem::MaybeUninit<_GUID> =
		::std::mem::MaybeUninit::uninit();
	let ptr = UNINIT.as_ptr();
	assert_eq!(
		::std::mem::size_of::<_GUID>(),
		16usize,
		concat!("Size of: ", stringify!(_GUID))
	);
	assert_eq!(
		::std::mem::align_of::<_GUID>(),
		4usize,
		concat!("Alignment of ", stringify!(_GUID))
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).Data1) as usize - ptr as usize },
		0usize,
		concat!(
			"Offset of field: ",
			stringify!(_GUID),
			"::",
			stringify!(Data1)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).Data2) as usize - ptr as usize },
		4usize,
		concat!(
			"Offset of field: ",
			stringify!(_GUID),
			"::",
			stringify!(Data2)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).Data3) as usize - ptr as usize },
		6usize,
		concat!(
			"Offset of field: ",
			stringify!(_GUID),
			"::",
			stringify!(Data3)
		)
	);
	assert_eq!(
		unsafe { ::std::ptr::addr_of!((*ptr).Data4) as usize - ptr as usize },
		8usize,
		concat!(
			"Offset of field: ",
			stringify!(_GUID),
			"::",
			stringify!(Data4)
		)
	);
}
pub type GUID = _GUID;
pub type IID = GUID;
pub type LPIID = *mut IID;
pub type CLSID = GUID;
pub type LPCLSID = *mut CLSID;
pub type FMTID = GUID;
pub type LPFMTID = *mut FMTID;
pub type CAObjHandle = isize;
pub type HRESULT = ::std::os::raw::c_long;
pub const UIError_UIENoError: UIError = 0;
pub const UIError_UIEManagerCouldNotOpen: UIError = -1;
pub const UIError_UIESystemFontCouldNotBeLoaded: UIError = -2;
pub const UIError_UIEOperationInvalidDuringPopUp: UIError = -3;
pub const UIError_UIEHandleInvalid: UIError = -4;
pub const UIError_UIEAttemptToMovePanelToInvalidLocation: UIError = -5;
pub const UIError_UIEAttemptedToMakeInoperableCtrlActive: UIError = -6;
pub const UIError_UIEOperationRequirePanelBeLoaded: UIError = -7;
pub const UIError_UIEOperationRequiresPopUpBeActive: UIError = -8;
pub const UIError_UIEOperationRequiresMenuBeLoaded: UIError = -9;
pub const UIError_UIEControlNotTypeExpectedByFunction: UIError = -10;
pub const UIError_UIEInvalidMenuItemId: UIError = -11;
pub const UIError_UIEOutOfMemory: UIError = -12;
pub const UIError_UIEInvalidControlId: UIError = -13;
pub const UIError_UIEValueIsInvalidOrOutOfRange: UIError = -14;
pub const UIError_UIEFileIsNotUserInterfaceFileOrIsBad: UIError = -15;
pub const UIError_UIEFileFormatIsOutOfDate: UIError = -16;
pub const UIError_UIEImageIsBadOrNotSupported: UIError = -17;
pub const UIError_UIENoUserEventPossibleWithCurrentSetup: UIError = -18;
pub const UIError_UIEUnableToOpenFile: UIError = -19;
pub const UIError_UIEErrorReadingFile: UIError = -20;
pub const UIError_UIEErrorWritingFile: UIError = -21;
pub const UIError_UIEErrorClosingFile: UIError = -22;
pub const UIError_UIEPanelStateFileHasInvalidFormat: UIError = -23;
pub const UIError_UIEInvalidIDinResourceFile: UIError = -24;
pub const UIError_UIEHardCopyError: UIError = -25;
pub const UIError_UIEInvalidDefaultDirSelectedInFSPopup: UIError = -26;
pub const UIError_UIEOperationIsInvalidForSpecifiedObject: UIError = -27;
pub const UIError_UIECantFindMenuString: UIError = -28;
pub const UIError_UIEPalleteItemsMustBeAddedAtEnd: UIError = -29;
pub const UIError_UIEMaxNumberOfMenusPerBarExceeded: UIError = -30;
pub const UIError_UIECantSetSeparatorCheckMark: UIError = -31;
pub const UIError_UIESeparatorCantHaveSubMenu: UIError = -32;
pub const UIError_UIEItemMustBeASeparator: UIError = -33;
pub const UIError_UIEItemCantBeASeparator: UIError = -34;
pub const UIError_UIEItemAlreadyHasSubMenu: UIError = -35;
pub const UIError_UIEItemDoesNotHaveASubMenu: UIError = -36;
pub const UIError_UIECtrlIdIsNotAMenuOrMenuItemIdOrNull: UIError = -37;
pub const UIError_UIECtrlIdIsNotAMenuOrMenuItemId: UIError = -38;
pub const UIError_UIENotASubMenuId: UIError = -39;
pub const UIError_UIEInvalidMenuId: UIError = -40;
pub const UIError_UIENotAMenuBarHandle: UIError = -41;
pub const UIError_UIENotAPanelHandle: UIError = -42;
pub const UIError_UIEOperationInvalidWhileThisPopupIsActive: UIError = -43;
pub const UIError_UIEAttributeNotAppropriateForSpecifiedControlOrPanelOrMenu:
	UIError = -44;
pub const UIError_UIEInvalidControlType: UIError = -45;
pub const UIError_UIEInvalidAttribute: UIError = -46;
pub const UIError_UIESlideMustHaveFillAboveOrBelow: UIError = -47;
pub const UIError_UIEScaleMustHaveFillAboveOrBelow: UIError = -48;
pub const UIError_UIESlideMustBeLinear: UIError = -49;
pub const UIError_UIEScaleMustBeLinear: UIError = -50;
pub const UIError_UIESlideDoesntHaveIncDecArrows: UIError = -51;
pub const UIError_UIEScaleDoesntHaveIncDecArrows: UIError = -52;
pub const UIError_UIEInvalidDataType: UIError = -53;
pub const UIError_UIEInvalidAttrForDataType: UIError = -54;
pub const UIError_UIEIndexOutOfRange: UIError = -55;
pub const UIError_UIENoItemsInList: UIError = -56;
pub const UIError_UIEBufTooSmall: UIError = -57;
pub const UIError_UIECtrlDoesNotHaveAValue: UIError = -58;
pub const UIError_UIEValueNotInListCtrl: UIError = -59;
pub const UIError_UIENotListCtrl: UIError = -60;
pub const UIError_UIENotListCtrlOrBinary: UIError = -61;
pub const UIError_UIENotStringDataType: UIError = -62;
pub const UIError_UIEAttributeNotSettable: UIError = -63;
pub const UIError_UIEInvalidCtrlMode: UIError = -64;
pub const UIError_UIENullPointerPassed: UIError = -65;
pub const UIError_UIECantSetGetTextBGColorOfMenuRing: UIError = -66;
pub const UIError_UIERingMustBeMenuStyle: UIError = -67;
pub const UIError_UIECantColorTextTransparent: UIError = -68;
pub const UIError_UIEInvalidValueInListControl: UIError = -69;
pub const UIError_UIEInvalidTabbingOrderPosition: UIError = -70;
pub const UIError_UIECantSetTabOrderOfAnIndicator: UIError = -71;
pub const UIError_UIENotAValidNumber: UIError = -72;
pub const UIError_UIEPanelDoesntHaveAMenuBar: UIError = -73;
pub const UIError_UIENotTextBox: UIError = -74;
pub const UIError_UIEInvalidChartStyle: UIError = -75;
pub const UIError_UIEInvalidImageType: UIError = -76;
pub const UIError_UIENotATopLevelPanelAttribute: UIError = -77;
pub const UIError_UIEListCtrlNotInCheckMode: UIError = -78;
pub const UIError_UIEPanelDataDoesNotFitIntoPanel: UIError = -79;
pub const UIError_UIEAxisRangeError: UIError = -80;
pub const UIError_UIENonExistantCursor: UIError = -81;
pub const UIError_UIENotAValidPlot: UIError = -82;
pub const UIError_UIEOutsidePlotArea: UIError = -83;
pub const UIError_UIEStringTooLarge: UIError = -84;
pub const UIError_UIECallbackFuncIsWrongType: UIError = -85;
pub const UIError_UIECantFindCallbackFunc: UIError = -86;
pub const UIError_UIEZeroCursors: UIError = -87;
pub const UIError_UIEInvalidChartScaling: UIError = -88;
pub const UIError_UIEFontNotInFontTable: UIError = -89;
pub const UIError_UIEBadAttributeValue: UIError = -90;
pub const UIError_UIETooManyFilesOpen: UIError = -91;
pub const UIError_UIEfEOF: UIError = -92;
pub const UIError_UIEIOError: UIError = -93;
pub const UIError_UIEFileWasNotFound: UIError = -94;
pub const UIError_UIEAccessDenied: UIError = -95;
pub const UIError_UIEFileAccessNotEnabled: UIError = -96;
pub const UIError_UIEDiskFull: UIError = -97;
pub const UIError_UIEFileAlreadyExists: UIError = -98;
pub const UIError_UIEFileAlreadyOpen: UIError = -99;
pub const UIError_UIEBadPathnameMsg: UIError = -100;
pub const UIError_UIEResourceNotFound: UIError = -101;
pub const UIError_UIEOldUnsupportedUIResourceFormat: UIError = -102;
pub const UIError_UIEFileIsCorrupted: UIError = -103;
pub const UIError_UIEOperationFailed: UIError = -104;
pub const UIError_UIESlideMustBeRound: UIError = -105;
pub const UIError_UIEScaleMustBeRound: UIError = -106;
pub const UIError_UIECountOutOfRange: UIError = -107;
pub const UIError_UIENotAValidKeycode: UIError = -108;
pub const UIError_UIESlideDoesntHaveFrame: UIError = -109;
pub const UIError_UIECantColorPanelBGTransparent: UIError = -110;
pub const UIError_UIECantColorTitleBGTransparent: UIError = -111;
pub const UIError_UIEMemPrintError: UIError = -112;
pub const UIError_UIEReservedHotKey: UIError = -113;
pub const UIError_UIEFileFormatIsTooNew: UIError = -114;
pub const UIError_UIESystemPrintError: UIError = -115;
pub const UIError_UIEDriverPrintError: UIError = -116;
pub const UIError_UIEDefCallBackQueueFull: UIError = -117;
pub const UIError_UIEInvalidMouseCursor: UIError = -118;
pub const UIError_UIEPrintReentranceError: UIError = -119;
pub const UIError_UIEOutOfGDISpace: UIError = -120;
pub const UIError_UIEHiddenPanelError: UIError = -121;
pub const UIError_UIEHiddenCtrlError: UIError = -122;
pub const UIError_UIEInvalidAttrForPlot: UIError = -123;
pub const UIError_UIECantColorPlotTransparent: UIError = -124;
pub const UIError_UIEInvalidColor: UIError = -125;
pub const UIError_UIECallbackNameIsAmbiguous: UIError = -126;
pub const UIError_UIEInvalidBitmap: UIError = -127;
pub const UIError_UIENoImagePresent: UIError = -128;
pub const UIError_UIEMustBeInTopLevelPanelThread: UIError = -129;
pub const UIError_UIEPanelNotInTUIFile: UIError = -130;
pub const UIError_UIEMenuBarNotInTUIFile: UIError = -131;
pub const UIError_UIECtrlStyleNotInTUIFile: UIError = -132;
pub const UIError_UIETagOrValueMissingInTUIFile: UIError = -133;
pub const UIError_UIESubFileReadingOrParsingError: UIError = -134;
pub const UIError_UIENoPrintersInstalled: UIError = -135;
pub const UIError_UIEInitialCellOutOfRange: UIError = -136;
pub const UIError_UIEInvalidCellType: UIError = -137;
pub const UIError_UIECellTypeMismatch: UIError = -138;
pub const UIError_UIECtrlDoesNotHaveMenu: UIError = -139;
pub const UIError_UIECannotDiscardBuiltInCtrlMenuItem: UIError = -140;
pub const UIError_UIECantSetSeparatorBold: UIError = -141;
pub const UIError_UIEMustPassEventData2: UIError = -142;
pub const UIError_UIEActiveXError: UIError = -143;
pub const UIError_UIEObjHandleDoesNotReferToActiveXCtrl: UIError = -144;
pub const UIError_UIEActiveXCtrlNotRegistered: UIError = -145;
pub const UIError_UIEActiveXPersistenceError: UIError = -146;
pub const UIError_UIEInvalidMenuButtonId: UIError = -147;
pub const UIError_UIECannotModifyBuiltInCtrlMenuItem: UIError = -148;
pub const UIError_UIEDataSocketError: UIError = -149;
pub const UIError_UIECtrlAlreadyBound: UIError = -150;
pub const UIError_UIECtrlNeedsActiveBinding: UIError = -151;
pub const UIError_UIEAttachedPanelMustBeChild: UIError = -152;
pub const UIError_UIEItemIsAttached: UIError = -153;
pub const UIError_UIEItemIsNotAttached: UIError = -154;
pub const UIError_UIECannotSizeCtrl: UIError = -155;
pub const UIError_UIECannotSelfAttach: UIError = -156;
pub const UIError_UIEOperationInvalidOnMaskedBitmap: UIError = -157;
pub const UIError_UIEOperationInvalidOnAlphaBitmap: UIError = -158;
pub const UIError_UIEOperationRequiresMaskedBitmap: UIError = -159;
pub const UIError_UIEOperationRequiresAlphaBitmap: UIError = -160;
pub const UIError_UIENonExistantAnnotation: UIError = -161;
pub const UIError_UIEOperationInvalidOnTabPanel: UIError = -162;
pub const UIError_UIEAttrValidOnMenubarOnly: UIError = -163;
pub const UIError_UIEAttrValidOnMenuItemOnly: UIError = -164;
pub const UIError_UIEAttrValidOnMenuAndSubmenusOnly: UIError = -165;
pub const UIError_UIEImageFeatureNotSupported: UIError = -166;
pub const UIError_UIEImageCompressionSchemeNotSupported: UIError = -167;
pub const UIError_UIEActiveXCtrlNotLicensed: UIError = -168;
pub const UIError_UIEMXBFileFormatNotRecognized: UIError = -169;
pub const UIError_UIEAttrValidOnMenuItemAndSubmenuOnly: UIError = -170;
pub const UIError_UIECannotAssignContextMenuItemShortcutKey: UIError = -171;
pub const UIError_UIECannotPauseUnlessContinuousMode: UIError = -172;
pub const UIError_UIEAttrFixedPlotAreaNotEnabled: UIError = -173;
pub const UIError_UIEStaleData: UIError = -174;
pub const UIError_UIEDataBindingNotSupportedIn64Bit: UIError = -175;
pub const UIError_UIEActiveXWrongConcurrencyModelForThread: UIError = -176;
pub const UIError_UIECtrlNotOnPanelAssocWithCtrlArray: UIError = -177;
pub const UIError_UIEInvalidAngleInMetaFont: UIError = -178;
pub const UIError_UIECellCannotBeMadeActive: UIError = -179;
pub const UIError_UIEFileDialogWrongConcurrencyModel: UIError = -180;
pub const UIError_UIEErrorLimit: UIError = -181;
#[doc = " errors returned by User Interface Library functions:"]
pub type UIError = ::std::os::raw::c_int;
unsafe extern "C" {
	#[doc = " for panels:"]
	pub fn LoadPanelAnsi(
		parentPanel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		panelResourceId: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadPanelUtf8(
		parentPanel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		panelResourceId: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadPanelExAnsi(
		parentPanel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		panelResourceId: ::std::os::raw::c_int,
		hInstance: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadPanelExUtf8(
		parentPanel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		panelResourceId: ::std::os::raw::c_int,
		hInstance: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewPanelAnsi(
		parentPanel: ::std::os::raw::c_int,
		panelTitle: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewPanelUtf8(
		parentPanel: ::std::os::raw::c_int,
		panelTitle: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DuplicatePanelAnsi(
		destinationParentPanel: ::std::os::raw::c_int,
		panel: ::std::os::raw::c_int,
		dupName: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DuplicatePanelUtf8(
		destinationParentPanel: ::std::os::raw::c_int,
		panel: ::std::os::raw::c_int,
		dupName: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DuplicatePanelTreeAnsi(
		destinationParentPanel: ::std::os::raw::c_int,
		panel: ::std::os::raw::c_int,
		dupName: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DuplicatePanelTreeUtf8(
		destinationParentPanel: ::std::os::raw::c_int,
		panel: ::std::os::raw::c_int,
		dupName: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardPanel(panel: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DisplayPanel(panel: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn HidePanel(panel: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActivePanel() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetActivePanel(
		panel: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ValidatePanel(
		panel: ::std::os::raw::c_int,
		valid: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DefaultPanel(panel: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SavePanelStateAnsi(
		panel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SavePanelStateUtf8(
		panel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RecallPanelStateAnsi(
		panel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RecallPanelStateUtf8(
		panel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPanelPos(
		panel: ::std::os::raw::c_int,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPanelSize(
		panel: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPanelCharacterSet(
		panel: ::std::os::raw::c_int,
		charSet: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for controls:"]
	pub fn NewCtrlAnsi(
		panel: ::std::os::raw::c_int,
		style: ::std::os::raw::c_int,
		ctrlLabel: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewCtrlUtf8(
		panel: ::std::os::raw::c_int,
		style: ::std::os::raw::c_int,
		ctrlLabel: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewActiveXCtrlAnsi(
		panel: ::std::os::raw::c_int,
		ctrlLabel: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		clsid: *const CLSID,
		iidForObjHandle: *const IID,
		licenseString: *const ::std::os::raw::c_char,
		activeXError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewActiveXCtrlUtf8(
		panel: ::std::os::raw::c_int,
		ctrlLabel: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		clsid: *const CLSID,
		iidForObjHandle: *const IID,
		licenseString: *const ::std::os::raw::c_char,
		activeXError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewActiveXCtrlFromFileAnsi(
		panel: ::std::os::raw::c_int,
		ctrlLabel: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		filename: *const ::std::os::raw::c_char,
		iidForObjHandle: *const IID,
		activeXError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewActiveXCtrlFromFileUtf8(
		panel: ::std::os::raw::c_int,
		ctrlLabel: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		filename: *const ::std::os::raw::c_char,
		iidForObjHandle: *const IID,
		activeXError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetObjHandleFromActiveXCtrl(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		objHandle: *mut CAObjHandle,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActiveXCtrlFromObjHandle(
		objHandle: CAObjHandle,
		panel: *mut ::std::os::raw::c_int,
		control: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DuplicateCtrlAnsi(
		sourcePanel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		destinationPanel: ::std::os::raw::c_int,
		labelOfDuplicate: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DuplicateCtrlUtf8(
		sourcePanel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		destinationPanel: ::std::os::raw::c_int,
		labelOfDuplicate: *const ::std::os::raw::c_char,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardCtrl(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetActiveCtrl(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActiveCtrl(panel: ::std::os::raw::c_int)
	-> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlBoundingRect(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		top: *mut ::std::os::raw::c_int,
		left: *mut ::std::os::raw::c_int,
		height: *mut ::std::os::raw::c_int,
		width: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlValUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlValAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlValUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlValAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DefaultCtrl(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for list controls: (list controls are rings and list boxes)"]
	pub fn ReplaceListItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ReplaceListItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertListItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertListItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteListItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		count: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetValueFromIndexUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemValue: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetValueFromIndexAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemValue: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetValueLengthFromIndexUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetValueLengthFromIndexAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetIndexFromValueUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetIndexFromValueAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlIndex(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlIndex(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClearListCtrl(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumListItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		count: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetLabelFromIndexUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetLabelFromIndexAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetLabelLengthFromIndexUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetLabelLengthFromIndexAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetIndexFromPoint(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		coordinate: Point,
		index: *mut ::std::os::raw::c_int,
		area: *mut ::std::os::raw::c_int,
		column: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for list boxes:"]
	pub fn SetListItemImage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		image: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetListItemImage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		image: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn IsListItemChecked(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		checked: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CheckListItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		check: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumCheckedItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		numItems: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for text boxes:"]
	pub fn InsertTextBoxLineAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTextBoxLineUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ReplaceTextBoxLineAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ReplaceTextBoxLineUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTextBoxLine(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTextBoxLines(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		numLines: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumTextBoxLines(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		count: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ResetTextBoxAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ResetTextBoxUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextBoxLineLengthAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		lineIndex: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextBoxLineLengthUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		lineIndex: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextBoxLineOffsetAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		lineIndex: ::std::os::raw::c_int,
		byteOffset: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextBoxLineOffsetUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		lineIndex: ::std::os::raw::c_int,
		byteOffset: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextBoxLineAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		lineIndex: ::std::os::raw::c_int,
		destBuffer: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextBoxLineUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		lineIndex: ::std::os::raw::c_int,
		destBuffer: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextBoxLineIndexFromOffsetAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		offset: ::std::os::raw::c_int,
		lineIndex: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextBoxLineIndexFromOffsetUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		offset: ::std::os::raw::c_int,
		lineIndex: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTextCtrlHeight(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " attribute functions:"]
	pub fn SetCtrlAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetMenuBarAttributeUtf8(
		menuBar: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetMenuBarAttributeAnsi(
		menuBar: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPanelAttributeUtf8(
		panel: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPanelAttributeAnsi(
		panel: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPrintAttributeExAnsi(
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPrintAttributeExUtf8(
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetSystemPopupsAttributeAnsi(
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetSystemPopupsAttributeUtf8(
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetSystemAttributeAnsi(
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetSystemAttributeUtf8(
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetRingItemAttribute(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetMenuBarAttributeUtf8(
		menuBar: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetMenuBarAttributeAnsi(
		menuBar: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPanelAttributeUtf8(
		panel: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPanelAttributeAnsi(
		panel: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPrintAttributeAnsi(
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPrintAttributeUtf8(
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetSystemPopupsAttributeAnsi(
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetSystemPopupsAttributeUtf8(
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetSystemAttributeAnsi(
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetSystemAttributeUtf8(
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetMonitorAttribute(
		monitorId: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		attributeValue: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetRingItemAttribute(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for monitors:"]
	pub fn GetMonitorFromPoint(
		p: Point,
		monitorId: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetMonitorFromRect(
		r: Rect,
		monitorId: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetMonitorFromPanel(
		panel: ::std::os::raw::c_int,
		monitorId: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for strip charts:"]
	pub fn SetTraceAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		traceNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTraceAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		traceNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTraceAttributeExAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		traceNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTraceAttributeExUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		traceNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTraceAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		traceNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTraceAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		traceNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for graphs:"]
	pub fn SetPlotAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		plotNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPlotAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		plotNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPlotAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		plotNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPlotAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		plotNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCursorAttribute(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cursorNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCursorAttribute(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cursorNum: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetGraphCoordsFromPoint(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		point: Point,
		x: *mut f64,
		y: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " printer functions:"]
	pub fn PrintPanelAnsi(
		panel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		fullSize: ::std::os::raw::c_int,
		scope: ::std::os::raw::c_int,
		dialog: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PrintPanelUtf8(
		panel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		fullSize: ::std::os::raw::c_int,
		scope: ::std::os::raw::c_int,
		dialog: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PrintCtrlAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		fullSize: ::std::os::raw::c_int,
		dialog: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PrintCtrlUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		fullSize: ::std::os::raw::c_int,
		dialog: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PrintTextFileAnsi(
		fileName: *const ::std::os::raw::c_char,
		fileDest: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PrintTextFileUtf8(
		fileName: *const ::std::os::raw::c_char,
		fileDest: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PrintTextBufferAnsi(
		buffer: *const ::std::os::raw::c_char,
		fileDest: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PrintTextBufferUtf8(
		buffer: *const ::std::os::raw::c_char,
		fileDest: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
#[doc = " callback function pointer prototypes:"]
pub type PanelCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		panel: ::std::os::raw::c_int,
		event: ::std::os::raw::c_int,
		callbackData: *mut ::std::os::raw::c_void,
		eventData1: ::std::os::raw::c_int,
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int,
>;
pub type CtrlCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		event: ::std::os::raw::c_int,
		callbackData: *mut ::std::os::raw::c_void,
		eventData1: ::std::os::raw::c_int,
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int,
>;
pub type MenuCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		menubar: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
		callbackData: *mut ::std::os::raw::c_void,
		panel: ::std::os::raw::c_int,
	),
>;
pub type MenuDimmerCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		menuBar: ::std::os::raw::c_int,
		panel: ::std::os::raw::c_int,
	),
>;
pub type MainCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		panelOrMenuBar: ::std::os::raw::c_int,
		controlOrMenuItem: ::std::os::raw::c_int,
		event: ::std::os::raw::c_int,
		callbackData: *mut ::std::os::raw::c_void,
		eventData1: ::std::os::raw::c_int,
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int,
>;
pub type DeferredCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(callbackData: *mut ::std::os::raw::c_void),
>;
pub type CellCompareCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item1: Point,
		item2: Point,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int,
>;
pub type TreeCellCompareCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item1: ::std::os::raw::c_int,
		item2: ::std::os::raw::c_int,
		keyCol: ::std::os::raw::c_int,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int,
>;
pub type CtrlMenuCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
		callbackData: *mut ::std::os::raw::c_void,
	),
>;
pub type WinMsgWParam = ::std::os::raw::c_ulonglong;
pub type WinMsgLParam = ::std::os::raw::c_ulonglong;
pub type WinMsgCallbackPtr = ::std::option::Option<
	unsafe extern "C" fn(
		wParam: WinMsgWParam,
		lParam: WinMsgLParam,
		callbackData: *mut ::std::os::raw::c_void,
	),
>;
unsafe extern "C" {
	#[doc = " for installing callback functions:"]
	pub fn InstallMainCallback(
		eventFunction: MainCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
		getIdleEvents: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InstallCtrlCallback(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		eventFunction: CtrlCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InstallPanelCallback(
		panel: ::std::os::raw::c_int,
		eventFunction: PanelCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InstallMenuCallback(
		menuBar: ::std::os::raw::c_int,
		menuOrMenuItem: ::std::os::raw::c_int,
		eventFunction: MenuCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InstallMenuDimmerCallback(
		menuBar: ::std::os::raw::c_int,
		dimmerFunction: MenuDimmerCallbackPtr,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PostDeferredCall(
		funcPtr: DeferredCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PostDeferredCallToThread(
		funcPtr: DeferredCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
		targetThreadId: ::std::os::raw::c_uint,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RegisterWinMsgCallbackAnsi(
		callbackFunc: WinMsgCallbackPtr,
		messageIdentifier: *const ::std::os::raw::c_char,
		callbackData: *mut ::std::os::raw::c_void,
		dataSize: ::std::os::raw::c_int,
		callbackId: *mut ::std::os::raw::c_int,
		deleteWhenUserProgramStops: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RegisterWinMsgCallbackUtf8(
		callbackFunc: WinMsgCallbackPtr,
		messageIdentifier: *const ::std::os::raw::c_char,
		callbackData: *mut ::std::os::raw::c_void,
		dataSize: ::std::os::raw::c_int,
		callbackId: *mut ::std::os::raw::c_int,
		deleteWhenUserProgramStops: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn UnRegisterWinMsgCallback(
		callbackId: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCVIWindowHandle() -> isize;
}
unsafe extern "C" {
	pub fn GetCVIWindowHandleForCurrThread() -> isize;
}
unsafe extern "C" {
	#[doc = " for user interface management:"]
	pub fn RunUserInterface() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn QuitUserInterface(
		returnCode: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ProcessSystemEvents() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ProcessDrawEvents() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn QueueUserEvent(
		eventNumber: ::std::os::raw::c_int,
		optionalPanel: ::std::os::raw::c_int,
		optionalControl: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetUserEvent(
		wait: ::std::os::raw::c_int,
		panel: *mut ::std::os::raw::c_int,
		control: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetInputMode(
		handle: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		mode: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetIdleEventRate(
		minIntervalInMillisecs: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetSleepPolicy(
		sleepPolicy: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetSleepPolicy() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for timer controls"]
	pub fn ResetTimer(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ResumeTimerCallbacks() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SuspendTimerCallbacks() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTimerTickData(
		eventTime: *mut f64,
		timeSinceLastCallback: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " time related functions"]
	pub fn MakeDateTime(
		hour: ::std::os::raw::c_int,
		minute: ::std::os::raw::c_int,
		second: f64,
		month: ::std::os::raw::c_int,
		day: ::std::os::raw::c_int,
		year: ::std::os::raw::c_int,
		dateTime: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FormatDateTimeStringAnsi(
		dateTime: f64,
		format: *const ::std::os::raw::c_char,
		buf: *mut ::std::os::raw::c_char,
		bufLen: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FormatDateTimeStringUtf8(
		dateTime: f64,
		format: *const ::std::os::raw::c_char,
		buf: *mut ::std::os::raw::c_char,
		bufLen: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCurrentDateTime(dateTime: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetDateTimeElements(
		dateTime: f64,
		hour: *mut ::std::os::raw::c_int,
		minute: *mut ::std::os::raw::c_int,
		second: *mut f64,
		month: *mut ::std::os::raw::c_int,
		day: *mut ::std::os::raw::c_int,
		year: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for menu bars:"]
	pub fn LoadMenuBarAnsi(
		parentPanel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		menuBarResourceId: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadMenuBarUtf8(
		parentPanel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		menuBarResourceId: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadMenuBarExAnsi(
		parentPanel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		menuBarResourceId: ::std::os::raw::c_int,
		hInstance: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn LoadMenuBarExUtf8(
		parentPanel: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		menuBarResourceId: ::std::os::raw::c_int,
		hInstance: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPanelMenuBar(
		panel: ::std::os::raw::c_int,
		menuBar: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPanelMenuBar(
		panel: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewMenuBarAnsi(
		parentPanel: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewMenuBarUtf8(
		parentPanel: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardMenuBar(
		menuBar: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn EmptyMenuBar(
		menuBar: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetSharedMenuBarEventPanel() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for menus:"]
	pub fn NewMenuAnsi(
		menuBar: ::std::os::raw::c_int,
		menuTitle: *const ::std::os::raw::c_char,
		beforeMenu: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewMenuUtf8(
		menuBar: ::std::os::raw::c_int,
		menuTitle: *const ::std::os::raw::c_char,
		beforeMenu: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardMenu(
		menuBar: ::std::os::raw::c_int,
		menu: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn EmptyMenu(
		menuBar: ::std::os::raw::c_int,
		menu: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewSubMenu(
		menuBar: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardSubMenu(
		menuBar: ::std::os::raw::c_int,
		subMenu: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RunPopupMenu(
		menuBar: ::std::os::raw::c_int,
		menu: ::std::os::raw::c_int,
		panel: ::std::os::raw::c_int,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		pinTop: ::std::os::raw::c_int,
		pinLeft: ::std::os::raw::c_int,
		pinHeight: ::std::os::raw::c_int,
		pinWidth: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for menu items:"]
	pub fn NewMenuItemAnsi(
		menuBar: ::std::os::raw::c_int,
		menu: ::std::os::raw::c_int,
		itemString: *const ::std::os::raw::c_char,
		beforeMenuItem: ::std::os::raw::c_int,
		shortCutKey: ::std::os::raw::c_int,
		eventFunction: MenuCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewMenuItemUtf8(
		menuBar: ::std::os::raw::c_int,
		menu: ::std::os::raw::c_int,
		itemString: *const ::std::os::raw::c_char,
		beforeMenuItem: ::std::os::raw::c_int,
		shortCutKey: ::std::os::raw::c_int,
		eventFunction: MenuCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardMenuItem(
		menuBar: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertSeparator(
		menuBar: ::std::os::raw::c_int,
		menu: ::std::os::raw::c_int,
		beforeMenuItem: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for graph plots:"]
	pub fn PlotX(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		xArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		xDType: ::std::os::raw::c_int,
		plotStyle: ::std::os::raw::c_int,
		pointStyle: ::std::os::raw::c_int,
		lineStyle: ::std::os::raw::c_int,
		pointFreq: ::std::os::raw::c_int,
		color: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotY(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		yArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		yDType: ::std::os::raw::c_int,
		plotStyle: ::std::os::raw::c_int,
		pointStyle: ::std::os::raw::c_int,
		lineStyle: ::std::os::raw::c_int,
		pointFreq: ::std::os::raw::c_int,
		color: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotXY(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		xArray: *mut ::std::os::raw::c_void,
		yArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		xDType: ::std::os::raw::c_int,
		yDType: ::std::os::raw::c_int,
		plotStyle: ::std::os::raw::c_int,
		pointStyle: ::std::os::raw::c_int,
		lineStyle: ::std::os::raw::c_int,
		pointFreq: ::std::os::raw::c_int,
		color: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotWaveform(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		wfmArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		wfmDType: ::std::os::raw::c_int,
		yGain: f64,
		yOffset: f64,
		xInit: f64,
		xInc: f64,
		plotStyle: ::std::os::raw::c_int,
		pointStyle: ::std::os::raw::c_int,
		lineStyle: ::std::os::raw::c_int,
		pointFreq: ::std::os::raw::c_int,
		color: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotPoint(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x: f64,
		y: f64,
		pointStyle: ::std::os::raw::c_int,
		color: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotTextAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x: f64,
		y: f64,
		theText: *const ::std::os::raw::c_char,
		fontName: *const ::std::os::raw::c_char,
		fgColor: ::std::os::raw::c_int,
		bgColor: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotTextUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x: f64,
		y: f64,
		theText: *const ::std::os::raw::c_char,
		fontName: *const ::std::os::raw::c_char,
		fgColor: ::std::os::raw::c_int,
		bgColor: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotLine(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x1: f64,
		y1: f64,
		x2: f64,
		y2: f64,
		color: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotRectangle(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x1: f64,
		y1: f64,
		x2: f64,
		y2: f64,
		frameColor: ::std::os::raw::c_int,
		fillColor: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotPolygon(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		xArray: *mut ::std::os::raw::c_void,
		yArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		xDType: ::std::os::raw::c_int,
		yDType: ::std::os::raw::c_int,
		frameColor: ::std::os::raw::c_int,
		fillColor: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotOval(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x1: f64,
		y1: f64,
		x2: f64,
		y2: f64,
		frameColor: ::std::os::raw::c_int,
		fillColor: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotArc(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x1: f64,
		y1: f64,
		x2: f64,
		y2: f64,
		begAngle: ::std::os::raw::c_int,
		arcAngle: ::std::os::raw::c_int,
		frameColor: ::std::os::raw::c_int,
		fillColor: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotIntensity(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		zArray: *mut ::std::os::raw::c_void,
		numXPoints: usize,
		numYPoints: usize,
		zDType: ::std::os::raw::c_int,
		colors: *mut ColorMapEntry,
		hiColor: ::std::os::raw::c_int,
		numColors: usize,
		interpColors: ::std::os::raw::c_int,
		interpPixels: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotScaledIntensity(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		zArray: *mut ::std::os::raw::c_void,
		numXPoints: usize,
		numYPoints: usize,
		zDType: ::std::os::raw::c_int,
		yGain: f64,
		yOffset: f64,
		xGain: f64,
		xOffset: f64,
		colors: *mut ColorMapEntry,
		hiColor: ::std::os::raw::c_int,
		numColors: usize,
		interpColors: ::std::os::raw::c_int,
		interpPixels: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotBitmapAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x: f64,
		y: f64,
		width: f64,
		height: f64,
		fileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotBitmapUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x: f64,
		y: f64,
		width: f64,
		height: f64,
		fileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotStripChart(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		yArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		start: ::std::os::raw::c_int,
		skip: ::std::os::raw::c_int,
		yDType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotStripChartPoint(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		y: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotPackedDigitalLines(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		data: *mut ::std::os::raw::c_void,
		numElements: usize,
		dataType: ::std::os::raw::c_int,
		mask: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotDigitalLines(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		data: *mut ::std::os::raw::c_void,
		numPoints: usize,
		dataType: ::std::os::raw::c_int,
		numLines: ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotPackedDigitalLinesMultiBus(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		data: *mut ::std::os::raw::c_void,
		numElements: usize,
		numBuses: ::std::os::raw::c_int,
		dataType: ::std::os::raw::c_int,
		interleaved: ::std::os::raw::c_int,
		maskArray: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PlotDigitalLinesMultiBus(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		data: *mut ::std::os::raw::c_void,
		numPoints: usize,
		numBuses: ::std::os::raw::c_int,
		dataType: ::std::os::raw::c_int,
		interleaved: ::std::os::raw::c_int,
		numPlotLinesArray: *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClearDigitalGraph(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteGraphPlot(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		plot: ::std::os::raw::c_int,
		timing: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClearStripChart(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RefreshGraph(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for graph and strip chart legends:"]
	pub fn ClearLegend(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumLegendItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		numItems: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetLegendItemFromPoint(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		coordinate: Point,
		item: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActiveLegendItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for graph scales:"]
	pub fn SetAxisScalingMode(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		mode: ::std::os::raw::c_int,
		min: f64,
		max: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAxisScalingMode(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		mode: *mut ::std::os::raw::c_int,
		min: *mut f64,
		max: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ReplaceAxisItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		itemValue: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ReplaceAxisItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		itemValue: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertAxisItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		itemValue: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertAxisItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		itemValue: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteAxisItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		count: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClearAxisItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumAxisItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		count: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAxisItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *mut ::std::os::raw::c_char,
		itemValue: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAxisItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		itemLabel: *mut ::std::os::raw::c_char,
		itemValue: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAxisItemLabelLengthAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAxisItemLabelLengthUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetAxisRange(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x_mode: ::std::os::raw::c_int,
		x_min: f64,
		x_max: f64,
		y_mode: ::std::os::raw::c_int,
		y_min: f64,
		y_max: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAxisRange(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x_mode: *mut ::std::os::raw::c_int,
		x_min: *mut f64,
		x_max: *mut f64,
		y_mode: *mut ::std::os::raw::c_int,
		y_min: *mut f64,
		y_max: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetAxisTimeFormatAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		format: ::std::os::raw::c_int,
		formatString: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetAxisTimeFormatUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		format: ::std::os::raw::c_int,
		formatString: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAxisTimeFormatAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		format: ::std::os::raw::c_int,
		outputBuffer: *mut ::std::os::raw::c_char,
		bufferSize: usize,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAxisTimeFormatUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		axis: ::std::os::raw::c_int,
		format: ::std::os::raw::c_int,
		outputBuffer: *mut ::std::os::raw::c_char,
		bufferSize: usize,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for graph cursors:"]
	pub fn GetGraphCursor(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cursorNum: ::std::os::raw::c_int,
		x: *mut f64,
		y: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetGraphCursor(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cursorNum: ::std::os::raw::c_int,
		x: f64,
		y: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActiveGraphCursor(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cursorNum: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetActiveGraphCursor(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cursorNum: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetGraphCursorIndex(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cursorNum: ::std::os::raw::c_int,
		plot: *mut ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetGraphCursorIndex(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cursorNum: ::std::os::raw::c_int,
		plot: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for graph annotations:"]
	pub fn GetAnnotationAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		attributeValue: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAnnotationAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		attributeValue: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetAnnotationAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetAnnotationAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AddGraphAnnotationAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		xVal: f64,
		yVal: f64,
		captionText: *const ::std::os::raw::c_char,
		xOffset: ::std::os::raw::c_int,
		yOffset: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AddGraphAnnotationUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		xVal: f64,
		yVal: f64,
		captionText: *const ::std::os::raw::c_char,
		xOffset: ::std::os::raw::c_int,
		yOffset: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteGraphAnnotation(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAnnotationIndexFromCaptionAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		captionText: *const ::std::os::raw::c_char,
		begIndex: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetAnnotationIndexFromCaptionUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		captionText: *const ::std::os::raw::c_char,
		begIndex: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " for pictures:"]
	pub fn DisplayImageFileAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DisplayImageFileUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteImage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetImageBits(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		imageId: ::std::os::raw::c_int,
		rowBytes: ::std::os::raw::c_int,
		depth: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		colors: *mut ::std::os::raw::c_int,
		bits: *mut ::std::os::raw::c_uchar,
		mask: *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetImageBits(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		imageId: ::std::os::raw::c_int,
		rowBytes: *mut ::std::os::raw::c_int,
		depth: *mut ::std::os::raw::c_int,
		width: *mut ::std::os::raw::c_int,
		height: *mut ::std::os::raw::c_int,
		colors: *mut ::std::os::raw::c_int,
		bits: *mut ::std::os::raw::c_uchar,
		mask: *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetImageInfo(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		imageId: ::std::os::raw::c_int,
		colorSize: *mut ::std::os::raw::c_int,
		bitsSize: *mut ::std::os::raw::c_int,
		maskSize: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AllocImageBits(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		imageId: ::std::os::raw::c_int,
		colors: *mut *mut ::std::os::raw::c_int,
		bits: *mut *mut ::std::os::raw::c_uchar,
		mask: *mut *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " popup functions:"]
	pub fn FileSelectPopupAnsi(
		defaultDir: *const ::std::os::raw::c_char,
		defaultSpec: *const ::std::os::raw::c_char,
		fileTypeList: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		buttonLabel: ::std::os::raw::c_int,
		restrictDir: ::std::os::raw::c_int,
		restrictExt: ::std::os::raw::c_int,
		allowCancel: ::std::os::raw::c_int,
		allowMakeDir: ::std::os::raw::c_int,
		fileSpec: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FileSelectPopupUtf8(
		defaultDir: *const ::std::os::raw::c_char,
		defaultSpec: *const ::std::os::raw::c_char,
		fileTypeList: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		buttonLabel: ::std::os::raw::c_int,
		restrictDir: ::std::os::raw::c_int,
		restrictExt: ::std::os::raw::c_int,
		allowCancel: ::std::os::raw::c_int,
		allowMakeDir: ::std::os::raw::c_int,
		fileSpec: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FileSelectPopupExAnsi(
		defaultDir: *const ::std::os::raw::c_char,
		defaultSpec: *const ::std::os::raw::c_char,
		fileTypeList: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		buttonLabel: ::std::os::raw::c_int,
		restrictDir: ::std::os::raw::c_int,
		restrictExt: ::std::os::raw::c_int,
		fileSpec: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FileSelectPopupExUtf8(
		defaultDir: *const ::std::os::raw::c_char,
		defaultSpec: *const ::std::os::raw::c_char,
		fileTypeList: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		buttonLabel: ::std::os::raw::c_int,
		restrictDir: ::std::os::raw::c_int,
		restrictExt: ::std::os::raw::c_int,
		fileSpec: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MultiFileSelectPopupAnsi(
		defaultDir: *const ::std::os::raw::c_char,
		defaultSpec: *const ::std::os::raw::c_char,
		fileTypeList: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		restrictDir: ::std::os::raw::c_int,
		restrictExt: ::std::os::raw::c_int,
		allowCancel: ::std::os::raw::c_int,
		numSelected: *mut ::std::os::raw::c_int,
		fileSpecList: *mut *mut *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MultiFileSelectPopupUtf8(
		defaultDir: *const ::std::os::raw::c_char,
		defaultSpec: *const ::std::os::raw::c_char,
		fileTypeList: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		restrictDir: ::std::os::raw::c_int,
		restrictExt: ::std::os::raw::c_int,
		allowCancel: ::std::os::raw::c_int,
		numSelected: *mut ::std::os::raw::c_int,
		fileSpecList: *mut *mut *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MultiFileSelectPopupExAnsi(
		defaultDir: *const ::std::os::raw::c_char,
		defaultSpec: *const ::std::os::raw::c_char,
		fileTypeList: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		restrictDir: ::std::os::raw::c_int,
		restrictExt: ::std::os::raw::c_int,
		numSelected: *mut ::std::os::raw::c_int,
		fileSpecList: *mut *mut *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MultiFileSelectPopupExUtf8(
		defaultDir: *const ::std::os::raw::c_char,
		defaultSpec: *const ::std::os::raw::c_char,
		fileTypeList: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		restrictDir: ::std::os::raw::c_int,
		restrictExt: ::std::os::raw::c_int,
		numSelected: *mut ::std::os::raw::c_int,
		fileSpecList: *mut *mut *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DirSelectPopupAnsi(
		defaultDir: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		allowCancel: ::std::os::raw::c_int,
		allowMakeDir: ::std::os::raw::c_int,
		dirChosen: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DirSelectPopupUtf8(
		defaultDir: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		allowCancel: ::std::os::raw::c_int,
		allowMakeDir: ::std::os::raw::c_int,
		dirChosen: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DirSelectPopupExAnsi(
		defaultDir: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		dirChosen: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DirSelectPopupExUtf8(
		defaultDir: *const ::std::os::raw::c_char,
		title: *const ::std::os::raw::c_char,
		dirChosen: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AddToFilePopupDirHistoryAnsi(
		pathString: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AddToFilePopupDirHistoryUtf8(
		pathString: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetFilePopupDirHistoryAnsi(
		numDirs: *mut ::std::os::raw::c_int,
		dirHistory: *mut *mut *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetFilePopupDirHistoryUtf8(
		numDirs: *mut ::std::os::raw::c_int,
		dirHistory: *mut *mut *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClearFilePopupDirHistory() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InstallPopup(
		popupHandle: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RemovePopup(
		removeAll: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MessagePopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		messageString: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MessagePopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		messageString: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ConfirmPopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		messageString: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ConfirmPopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		messageString: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PromptPopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		messageString: *const ::std::os::raw::c_char,
		responseBuffer: *mut ::std::os::raw::c_char,
		maxResponseLength: usize,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PromptPopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		messageString: *const ::std::os::raw::c_char,
		responseBuffer: *mut ::std::os::raw::c_char,
		maxResponseLength: usize,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GenericMessagePopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		messageString: *const ::std::os::raw::c_char,
		btn1Label: *const ::std::os::raw::c_char,
		btn2Label: *const ::std::os::raw::c_char,
		btn3Label: *const ::std::os::raw::c_char,
		responseBuffer: *mut ::std::os::raw::c_char,
		maxResponseLength: usize,
		putBtnsOnSide: ::std::os::raw::c_int,
		activeControl: ::std::os::raw::c_int,
		defaultBtn: ::std::os::raw::c_int,
		cancelBtn: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GenericMessagePopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		messageString: *const ::std::os::raw::c_char,
		btn1Label: *const ::std::os::raw::c_char,
		btn2Label: *const ::std::os::raw::c_char,
		btn3Label: *const ::std::os::raw::c_char,
		responseBuffer: *mut ::std::os::raw::c_char,
		maxResponseLength: usize,
		putBtnsOnSide: ::std::os::raw::c_int,
		activeControl: ::std::os::raw::c_int,
		defaultBtn: ::std::os::raw::c_int,
		cancelBtn: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn YGraphPopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		yArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		yDType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn YGraphPopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		yArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		yDType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn XGraphPopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		xArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		xDType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn XGraphPopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		xArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		xDType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn XYGraphPopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		xArray: *mut ::std::os::raw::c_void,
		yArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		xDType: ::std::os::raw::c_int,
		yDType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn XYGraphPopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		xArray: *mut ::std::os::raw::c_void,
		yArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		xDType: ::std::os::raw::c_int,
		yDType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn WaveformGraphPopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		wFmArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		wFmDType: ::std::os::raw::c_int,
		yGain: f64,
		yOffset: f64,
		xInit: f64,
		xInc: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn WaveformGraphPopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		wFmArray: *mut ::std::os::raw::c_void,
		numPoints: usize,
		wFmDType: ::std::os::raw::c_int,
		yGain: f64,
		yOffset: f64,
		xInit: f64,
		xInc: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FontSelectPopupAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		sampleString: *const ::std::os::raw::c_char,
		monoSpacedOnly: ::std::os::raw::c_int,
		typeFace: *mut ::std::os::raw::c_char,
		bold: *mut ::std::os::raw::c_int,
		underline: *mut ::std::os::raw::c_int,
		strikeOut: *mut ::std::os::raw::c_int,
		italic: *mut ::std::os::raw::c_int,
		justification: *mut ::std::os::raw::c_int,
		textColor: *mut ::std::os::raw::c_int,
		fontSize: *mut ::std::os::raw::c_int,
		minFontSize: ::std::os::raw::c_int,
		maxFontSize: ::std::os::raw::c_int,
		allowDefaultBtn: ::std::os::raw::c_int,
		allowMetaFonts: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FontSelectPopupUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		sampleString: *const ::std::os::raw::c_char,
		monoSpacedOnly: ::std::os::raw::c_int,
		typeFace: *mut ::std::os::raw::c_char,
		bold: *mut ::std::os::raw::c_int,
		underline: *mut ::std::os::raw::c_int,
		strikeOut: *mut ::std::os::raw::c_int,
		italic: *mut ::std::os::raw::c_int,
		justification: *mut ::std::os::raw::c_int,
		textColor: *mut ::std::os::raw::c_int,
		fontSize: *mut ::std::os::raw::c_int,
		minFontSize: ::std::os::raw::c_int,
		maxFontSize: ::std::os::raw::c_int,
		allowDefaultBtn: ::std::os::raw::c_int,
		allowMetaFonts: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetFontPopupDefaultsAnsi(
		typeFace: *const ::std::os::raw::c_char,
		bold: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeOut: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		justification: ::std::os::raw::c_int,
		textColor: ::std::os::raw::c_int,
		fontSize: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetFontPopupDefaultsUtf8(
		typeFace: *const ::std::os::raw::c_char,
		bold: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeOut: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		justification: ::std::os::raw::c_int,
		textColor: ::std::os::raw::c_int,
		fontSize: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FontSelectPopupExAnsi(
		popupTitle: *const ::std::os::raw::c_char,
		sampleString: *const ::std::os::raw::c_char,
		monoSpacedOnly: ::std::os::raw::c_int,
		typeFace: *mut ::std::os::raw::c_char,
		bold: *mut ::std::os::raw::c_int,
		underline: *mut ::std::os::raw::c_int,
		strikeOut: *mut ::std::os::raw::c_int,
		italic: *mut ::std::os::raw::c_int,
		justification: *mut ::std::os::raw::c_int,
		textColor: *mut ::std::os::raw::c_int,
		angle: *mut ::std::os::raw::c_int,
		charSet: *mut ::std::os::raw::c_int,
		fontSize: *mut ::std::os::raw::c_int,
		minFontSize: ::std::os::raw::c_int,
		maxFontSize: ::std::os::raw::c_int,
		allowDefaultBtn: ::std::os::raw::c_int,
		allowMetaFonts: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FontSelectPopupExUtf8(
		popupTitle: *const ::std::os::raw::c_char,
		sampleString: *const ::std::os::raw::c_char,
		monoSpacedOnly: ::std::os::raw::c_int,
		typeFace: *mut ::std::os::raw::c_char,
		bold: *mut ::std::os::raw::c_int,
		underline: *mut ::std::os::raw::c_int,
		strikeOut: *mut ::std::os::raw::c_int,
		italic: *mut ::std::os::raw::c_int,
		justification: *mut ::std::os::raw::c_int,
		textColor: *mut ::std::os::raw::c_int,
		angle: *mut ::std::os::raw::c_int,
		charSet: *mut ::std::os::raw::c_int,
		fontSize: *mut ::std::os::raw::c_int,
		minFontSize: ::std::os::raw::c_int,
		maxFontSize: ::std::os::raw::c_int,
		allowDefaultBtn: ::std::os::raw::c_int,
		allowMetaFonts: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetFontPopupDefaultsExAnsi(
		typeFace: *const ::std::os::raw::c_char,
		bold: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeOut: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		justification: ::std::os::raw::c_int,
		textColor: ::std::os::raw::c_int,
		angle: ::std::os::raw::c_int,
		charSet: ::std::os::raw::c_int,
		fontSize: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetFontPopupDefaultsExUtf8(
		typeFace: *const ::std::os::raw::c_char,
		bold: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeOut: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		justification: ::std::os::raw::c_int,
		textColor: ::std::os::raw::c_int,
		angle: ::std::os::raw::c_int,
		charSet: ::std::os::raw::c_int,
		fontSize: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " clipboard functions:"]
	pub fn ClipboardPutBitmap(
		bitmap: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClipboardGetBitmap(
		bitmap: *mut ::std::os::raw::c_int,
		available: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClipboardPutTextAnsi(
		text: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClipboardPutTextUtf8(
		text: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClipboardGetTextAnsi(
		text: *mut *mut ::std::os::raw::c_char,
		available: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClipboardGetTextUtf8(
		text: *mut *mut ::std::os::raw::c_char,
		available: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " keypress handling functions"]
	pub fn KeyPressEventIsLeadByte(
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn KeyPressEventIsTrailByte(
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetKeyPressEventVirtualKey(
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetKeyPressEventCharacterAnsi(
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetKeyPressEventCharacterUnicode(
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetKeyPressEventModifiers(
		eventData2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetKeyPressEventKeyAnsi(
		eventData2: ::std::os::raw::c_int,
		virtualKey: ::std::os::raw::c_int,
		character: ::std::os::raw::c_int,
		modifiers: ::std::os::raw::c_int,
		isLeadByte: ::std::os::raw::c_int,
		isTrailByte: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetKeyPressEventKeyUnicode(
		eventData2: ::std::os::raw::c_int,
		virtualKey: ::std::os::raw::c_int,
		character: ::std::os::raw::c_int,
		modifiers: ::std::os::raw::c_int,
		isLeadByte: ::std::os::raw::c_int,
		isTrailByte: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " panel sizing and moving handling functions"]
	pub fn GetPanelEventRect(
		eventData2: ::std::os::raw::c_int,
		r: *mut Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetPanelEventRect(
		eventData2: ::std::os::raw::c_int,
		r: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " miscellaneous functions:"]
	pub fn MakeColor(
		red: ::std::os::raw::c_int,
		green: ::std::os::raw::c_int,
		blue: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn Get3dBorderColors(
		color: ::std::os::raw::c_int,
		highlightColor: *mut ::std::os::raw::c_int,
		lightColor: *mut ::std::os::raw::c_int,
		shadowColor: *mut ::std::os::raw::c_int,
		darkShadowColor: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetWaitCursor(wait: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetWaitCursorState() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetMouseCursor(
		cursor: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetMouseCursor(
		cursor: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetGlobalMouseState(
		panel: *mut ::std::os::raw::c_int,
		x: *mut ::std::os::raw::c_int,
		y: *mut ::std::os::raw::c_int,
		leftButtonDown: *mut ::std::os::raw::c_int,
		rightButtonDown: *mut ::std::os::raw::c_int,
		keyModifiers: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetRelativeMouseState(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		x: *mut ::std::os::raw::c_int,
		y: *mut ::std::os::raw::c_int,
		leftButtonDown: *mut ::std::os::raw::c_int,
		rightButtonDown: *mut ::std::os::raw::c_int,
		keyModifiers: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetScreenSize(
		height: *mut ::std::os::raw::c_int,
		width: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CreateMetaFontAnsi(
		name: *const ::std::os::raw::c_char,
		fontName: *const ::std::os::raw::c_char,
		size: ::std::os::raw::c_int,
		bold: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeout: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CreateMetaFontUtf8(
		name: *const ::std::os::raw::c_char,
		fontName: *const ::std::os::raw::c_char,
		size: ::std::os::raw::c_int,
		bold: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeout: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CreateMetaFontExAnsi(
		name: *const ::std::os::raw::c_char,
		fontName: *const ::std::os::raw::c_char,
		size: ::std::os::raw::c_int,
		bold: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeout: ::std::os::raw::c_int,
		angle: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CreateMetaFontExUtf8(
		name: *const ::std::os::raw::c_char,
		fontName: *const ::std::os::raw::c_char,
		size: ::std::os::raw::c_int,
		bold: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeout: ::std::os::raw::c_int,
		angle: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CreateMetaFontWithCharacterSetAnsi(
		name: *const ::std::os::raw::c_char,
		fontName: *const ::std::os::raw::c_char,
		size: ::std::os::raw::c_int,
		bold: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeout: ::std::os::raw::c_int,
		angle: ::std::os::raw::c_int,
		characterSet: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CreateMetaFontWithCharacterSetUtf8(
		name: *const ::std::os::raw::c_char,
		fontName: *const ::std::os::raw::c_char,
		size: ::std::os::raw::c_int,
		bold: ::std::os::raw::c_int,
		italic: ::std::os::raw::c_int,
		underline: ::std::os::raw::c_int,
		strikeout: ::std::os::raw::c_int,
		angle: ::std::os::raw::c_int,
		characterSet: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextDisplaySizeAnsi(
		ptr: *const ::std::os::raw::c_char,
		fontString: *const ::std::os::raw::c_char,
		height: *mut ::std::os::raw::c_int,
		width: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTextDisplaySizeUtf8(
		ptr: *const ::std::os::raw::c_char,
		fontString: *const ::std::os::raw::c_char,
		height: *mut ::std::os::raw::c_int,
		width: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FakeKeystroke(
		fakedKey: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FakeKeystrokeUnicode(
		fakedKey: KeyCodeUnicode,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MakeApplicationActive() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetOwnerForNextCreatedWindow(
		ownerHwnd: isize,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetUILErrorStringAnsi(
		errorCode: ::std::os::raw::c_int,
	) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
	pub fn GetUILErrorStringUtf8(
		errorCode: ::std::os::raw::c_int,
	) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
	pub fn MinimizeAllWindows();
}
unsafe extern "C" {
	pub fn GetRealFontTypefaceNameAnsi(
		fontName: *mut ::std::os::raw::c_char,
		typefaceName: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetRealFontTypefaceNameUtf8(
		fontName: *mut ::std::os::raw::c_char,
		typefaceName: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetRealFontTypefaceNameLengthAnsi(
		fontName: *mut ::std::os::raw::c_char,
		typefaceNameLength: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetRealFontTypefaceNameLengthUtf8(
		fontName: *mut ::std::os::raw::c_char,
		typefaceNameLength: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetFontTypefaceNameAnsi(
		fontName: *mut ::std::os::raw::c_char,
		typefaceName: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetFontTypefaceNameUtf8(
		fontName: *mut ::std::os::raw::c_char,
		typefaceName: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetFontTypefaceNameLengthAnsi(
		fontName: *mut ::std::os::raw::c_char,
		typefaceNameLength: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetFontTypefaceNameLengthUtf8(
		fontName: *mut ::std::os::raw::c_char,
		typefaceNameLength: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " functions provided for LW DOS compatibility:"]
	pub fn DisplayPCXFileAnsi(
		fileName: *const ::std::os::raw::c_char,
		x: ::std::os::raw::c_int,
		y: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DisplayPCXFileUtf8(
		fileName: *const ::std::os::raw::c_char,
		x: ::std::os::raw::c_int,
		y: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ConfigurePrinter(
		printFile: *const ::std::os::raw::c_char,
		orientation: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		ejectPage: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DOSColorToRGB(color: ::std::os::raw::c_int)
	-> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DOSCompatWindow() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " Drawing functions for use with the canvas control"]
	pub fn CanvasStartBatchDraw(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasEndBatchDraw(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawPoint(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		p: Point,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawLine(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		start: Point,
		end: Point,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawLineTo(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		end: Point,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawRect(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		r: Rect,
		drawMode: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDimRect(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		r: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawRoundedRect(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		r: Rect,
		ovalHeight: ::std::os::raw::c_int,
		ovalWidth: ::std::os::raw::c_int,
		drawMode: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawOval(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		r: Rect,
		drawMode: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawArc(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		r: Rect,
		begAngle: ::std::os::raw::c_int,
		arcAngle: ::std::os::raw::c_int,
		drawMode: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawPoly(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		numPts: usize,
		points: *const Point,
		wrap: ::std::os::raw::c_int,
		drawMode: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawTextAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
		metaFont: *const ::std::os::raw::c_char,
		bounds: Rect,
		alignment: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawTextUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
		metaFont: *const ::std::os::raw::c_char,
		bounds: Rect,
		alignment: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawTextAtPointAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
		metaFont: *const ::std::os::raw::c_char,
		anchor: Point,
		alignment: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawTextAtPointUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		text: *const ::std::os::raw::c_char,
		metaFont: *const ::std::os::raw::c_char,
		anchor: Point,
		alignment: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDrawBitmap(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		bitmap: ::std::os::raw::c_int,
		source: Rect,
		destination: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasScroll(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		r: Rect,
		dx: ::std::os::raw::c_int,
		dy: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasInvertRect(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		r: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasClear(
		panel: ::std::os::raw::c_int,
		canvas: ::std::os::raw::c_int,
		r: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " Pen functions for use with the canvas control"]
	pub fn CanvasGetPenPosition(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		penPosition: *mut Point,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasSetPenPosition(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		penPosition: Point,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasDefaultPen(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " Update functions for use with the canvas control"]
	pub fn CanvasUpdate(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		updateArea: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " Clipping functions for use with the canvas control"]
	pub fn CanvasSetClipRect(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		clipRect: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasGetClipRect(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		clipRect: *mut Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " Bitmap functions"]
	pub fn NewBitmap(
		rowBytes: ::std::os::raw::c_int,
		depth: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		colors: *mut ::std::os::raw::c_int,
		bits: *mut ::std::os::raw::c_uchar,
		mask: *mut ::std::os::raw::c_uchar,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewBitmapEx(
		rowBytes: ::std::os::raw::c_int,
		depth: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		colors: *mut ::std::os::raw::c_int,
		bits: *mut ::std::os::raw::c_uchar,
		mask: *mut ::std::os::raw::c_uchar,
		alpha: *mut ::std::os::raw::c_uchar,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumImagesInFileAnsi(
		fileName: *const ::std::os::raw::c_char,
		numImages: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumImagesInFileUtf8(
		fileName: *const ::std::os::raw::c_char,
		numImages: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetBitmapFromFileAnsi(
		fileName: *const ::std::os::raw::c_char,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetBitmapFromFileUtf8(
		fileName: *const ::std::os::raw::c_char,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetBitmapFromFileExAnsi(
		fileName: *const ::std::os::raw::c_char,
		index: ::std::os::raw::c_int,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetBitmapFromFileExUtf8(
		fileName: *const ::std::os::raw::c_char,
		index: ::std::os::raw::c_int,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SaveBitmapToBMPFileAnsi(
		bitmap: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SaveBitmapToBMPFileUtf8(
		bitmap: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SaveBitmapToJPEGFileAnsi(
		bitmap: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		options: ::std::os::raw::c_ulong,
		quality: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SaveBitmapToJPEGFileUtf8(
		bitmap: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		options: ::std::os::raw::c_ulong,
		quality: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SaveBitmapToPNGFileAnsi(
		bitmap: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SaveBitmapToPNGFileUtf8(
		bitmap: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SaveBitmapToTIFFileAnsi(
		bitmap: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		compression: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SaveBitmapToTIFFileUtf8(
		bitmap: ::std::os::raw::c_int,
		fileName: *const ::std::os::raw::c_char,
		compression: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlBitmap(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		imageId: ::std::os::raw::c_int,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardBitmap(
		bitmap: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DuplicateBitmap(
		sourceBitmap: ::std::os::raw::c_int,
		destinationBitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlDisplayBitmap(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		includeLabel: ::std::os::raw::c_int,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetScaledCtrlDisplayBitmap(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		includeLabel: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPanelDisplayBitmap(
		panel: ::std::os::raw::c_int,
		scope: ::std::os::raw::c_int,
		area: Rect,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetScaledPanelDisplayBitmap(
		panel: ::std::os::raw::c_int,
		scope: ::std::os::raw::c_int,
		area: Rect,
		height: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
		bitmap: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlBitmap(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		imageId: ::std::os::raw::c_int,
		bitmap: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetBitmapData(
		bitmap: ::std::os::raw::c_int,
		rowBytes: ::std::os::raw::c_int,
		depth: ::std::os::raw::c_int,
		colors: *mut ::std::os::raw::c_int,
		bits: *mut ::std::os::raw::c_uchar,
		mask: *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetBitmapDataEx(
		bitmap: ::std::os::raw::c_int,
		rowBytes: ::std::os::raw::c_int,
		depth: ::std::os::raw::c_int,
		colors: *mut ::std::os::raw::c_int,
		bits: *mut ::std::os::raw::c_uchar,
		mask: *mut ::std::os::raw::c_uchar,
		alpha: *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetBitmapData(
		bitmap: ::std::os::raw::c_int,
		rowBytes: *mut ::std::os::raw::c_int,
		depth: *mut ::std::os::raw::c_int,
		width: *mut ::std::os::raw::c_int,
		height: *mut ::std::os::raw::c_int,
		colors: *mut ::std::os::raw::c_int,
		bits: *mut ::std::os::raw::c_uchar,
		mask: *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetBitmapDataEx(
		bitmap: ::std::os::raw::c_int,
		rowBytes: *mut ::std::os::raw::c_int,
		depth: *mut ::std::os::raw::c_int,
		width: *mut ::std::os::raw::c_int,
		height: *mut ::std::os::raw::c_int,
		colors: *mut ::std::os::raw::c_int,
		bits: *mut ::std::os::raw::c_uchar,
		mask: *mut ::std::os::raw::c_uchar,
		alpha: *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetBitmapInfo(
		bitmap: ::std::os::raw::c_int,
		colorSize: *mut ::std::os::raw::c_int,
		bitsSize: *mut ::std::os::raw::c_int,
		maskSize: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetBitmapInfoEx(
		bitmap: ::std::os::raw::c_int,
		colorSize: *mut ::std::os::raw::c_int,
		bitsSize: *mut ::std::os::raw::c_int,
		maskSize: *mut ::std::os::raw::c_int,
		alphaSize: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AllocBitmapData(
		bitmap: ::std::os::raw::c_int,
		colors: *mut *mut ::std::os::raw::c_int,
		bits: *mut *mut ::std::os::raw::c_uchar,
		mask: *mut *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AllocBitmapDataEx(
		bitmap: ::std::os::raw::c_int,
		colors: *mut *mut ::std::os::raw::c_int,
		bits: *mut *mut ::std::os::raw::c_uchar,
		mask: *mut *mut ::std::os::raw::c_uchar,
		alpha: *mut *mut ::std::os::raw::c_uchar,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " Pixel value functions for use with the canvas control"]
	pub fn CanvasGetPixel(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		p: Point,
		pixel: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CanvasGetPixels(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		r: Rect,
		pixels: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = " Creating and modifying Rectangles and Points"]
	pub fn MakeRect(
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
	) -> Rect;
}
unsafe extern "C" {
	pub fn RectSet(
		r: *mut Rect,
		top: ::std::os::raw::c_int,
		left: ::std::os::raw::c_int,
		height: ::std::os::raw::c_int,
		width: ::std::os::raw::c_int,
	);
}
unsafe extern "C" {
	pub fn RectSetFromPoints(r: *mut Rect, p1: Point, p2: Point);
}
unsafe extern "C" {
	pub fn RectSetBottom(r: *mut Rect, bottom: ::std::os::raw::c_int);
}
unsafe extern "C" {
	pub fn RectSetRight(r: *mut Rect, right: ::std::os::raw::c_int);
}
unsafe extern "C" {
	pub fn RectSetCenter(r: *mut Rect, centerPoint: Point);
}
unsafe extern "C" {
	pub fn RectOffset(
		r: *mut Rect,
		dx: ::std::os::raw::c_int,
		dy: ::std::os::raw::c_int,
	);
}
unsafe extern "C" {
	pub fn RectMove(r: *mut Rect, p: Point);
}
unsafe extern "C" {
	pub fn RectGrow(
		r: *mut Rect,
		dx: ::std::os::raw::c_int,
		dy: ::std::os::raw::c_int,
	);
}
unsafe extern "C" {
	pub fn MakePoint(
		x: ::std::os::raw::c_int,
		y: ::std::os::raw::c_int,
	) -> Point;
}
unsafe extern "C" {
	pub fn PointSet(
		p: *mut Point,
		x: ::std::os::raw::c_int,
		y: ::std::os::raw::c_int,
	);
}
unsafe extern "C" {
	#[doc = " Retrieving and comparing Rect and Point values"]
	pub fn RectBottom(r: Rect) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RectRight(r: Rect) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RectCenter(r: Rect, centerPoint: *mut Point);
}
unsafe extern "C" {
	pub fn RectEqual(r1: Rect, r2: Rect) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RectEmpty(r: Rect) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RectContainsPoint(r: Rect, p: Point) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RectContainsRect(
		container: Rect,
		containee: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RectSameSize(r1: Rect, r2: Rect) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RectUnion(r1: Rect, r2: Rect, unionRect: *mut Rect);
}
unsafe extern "C" {
	pub fn RectIntersection(
		r1: Rect,
		r2: Rect,
		intersectionRect: *mut Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PointEqual(p1: Point, p2: Point) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn PointPinnedToRect(p: Point, r: Rect, pinnedPoint: *mut Point);
}
unsafe extern "C" {
	#[doc = "/\n/*** functions for table controls ***/\n/"]
	pub fn GetNumTableRows(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		numRows: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumTableColumns(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		numColumns: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableRowAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		rowIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableRowAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		rowIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableColumnAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableColumnAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellRangeAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellRangeAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellRingItemAttribute(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		ringItemIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableRowAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		rowIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableRowAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		rowIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableColumnAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableColumnAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRingItemAttribute(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		ringItemIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTableRows(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		rowIndex: ::std::os::raw::c_int,
		numRows: ::std::os::raw::c_int,
		cellType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTableColumns(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
		numColumns: ::std::os::raw::c_int,
		cellType: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTableRows(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		rowIndex: ::std::os::raw::c_int,
		numRows: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTableColumns(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
		numColumns: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellFromValueUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		begCell: Point,
		cellRange: Rect,
		cell: *mut Point,
		direction: ::std::os::raw::c_int,
		cellType: ::std::os::raw::c_int,
		dataType: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellFromValueAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		begCell: Point,
		cellRange: Rect,
		cell: *mut Point,
		direction: ::std::os::raw::c_int,
		cellType: ::std::os::raw::c_int,
		dataType: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableRowFromLabelAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		rowIndex: *mut ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
		visibleLabelsOnly: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableRowFromLabelUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		rowIndex: *mut ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
		visibleLabelsOnly: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableColumnFromLabelAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		columnIndex: *mut ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
		visibleLabelsOnly: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableColumnFromLabelUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		columnIndex: *mut ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
		visibleLabelsOnly: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellValUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellValAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellValFromIndex(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellRangeValsUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		valArray: *mut ::std::os::raw::c_void,
		direction: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableCellRangeValsAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		valArray: *mut ::std::os::raw::c_void,
		direction: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FillTableCellRangeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FillTableCellRangeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellValUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellValAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRangeValsUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		valArray: *mut ::std::os::raw::c_void,
		direction: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRangeValsAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		valArray: *mut ::std::os::raw::c_void,
		direction: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellValLengthUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellValLengthAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn FreeTableValStrings(
		valArray: *mut ::std::os::raw::c_void,
		count: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellFromPoint(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		coordinate: Point,
		cell: *mut Point,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRangeRect(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		coordinates: *mut Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActiveTableCell(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: *mut Point,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetActiveTableCell(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableSelection(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: *mut Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTableSelection(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SortTableCells(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		direction: ::std::os::raw::c_int,
		keyIndex: ::std::os::raw::c_int,
		descending: ::std::os::raw::c_int,
		comparisonFunction: CellCompareCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClipboardPutTableVals(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClipboardGetTableVals(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		available: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumTableCellRingItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		numItems: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTableCellRingItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		index: ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTableCellRingItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		index: ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTableCellRangeRingItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		index: ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTableCellRangeRingItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		index: ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTableCellRingItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		index: ::std::os::raw::c_int,
		numItems: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTableCellRangeRingItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		index: ::std::os::raw::c_int,
		numItems: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRingIndexFromValueAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		cell: Point,
		index: *mut ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRingIndexFromValueUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		cell: Point,
		index: *mut ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRingValueFromIndexAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		index: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRingValueFromIndexUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		index: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRingValueLengthFromIndexAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		index: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTableCellRingValueLengthFromIndexUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cell: Point,
		index: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = "/\n/*** functions for tree controls ***/\n/"]
	pub fn InsertTreeItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		position: ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
		tagBase: *const ::std::os::raw::c_char,
		tag: *mut ::std::os::raw::c_char,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTreeItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		position: ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
		tagBase: *const ::std::os::raw::c_char,
		tag: *mut ::std::os::raw::c_char,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemTagUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		tag: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemTagAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		tag: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumTreeItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		direction: ::std::os::raw::c_int,
		stateCriteria: ::std::os::raw::c_int,
		numItems: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetActiveTreeItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		selectionEffect: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActiveTreeItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn IsTreeItemExposed(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		exposed: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTreeItemAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTreeItemAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AddTreeImage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		bitmap: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MoveTreeItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		position: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CopyTreeItem(
		panelSrc: ::std::os::raw::c_int,
		controlSrc: ::std::os::raw::c_int,
		indexSrc: ::std::os::raw::c_int,
		panelDst: ::std::os::raw::c_int,
		controlDst: ::std::os::raw::c_int,
		relationDst: ::std::os::raw::c_int,
		relativeIndexDst: ::std::os::raw::c_int,
		positionDst: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MakeTreeItemVisible(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AreTreeItemsRelated(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		related: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		direction: ::std::os::raw::c_int,
		stateCriteria: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemFromLabelUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		direction: ::std::os::raw::c_int,
		stateCriteria: ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemFromLabelAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		direction: ::std::os::raw::c_int,
		stateCriteria: ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemFromValueUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		direction: ::std::os::raw::c_int,
		stateCriteria: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemFromValueAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		relation: ::std::os::raw::c_int,
		relativeIndex: ::std::os::raw::c_int,
		begIndex: ::std::os::raw::c_int,
		direction: ::std::os::raw::c_int,
		stateCriteria: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemFromTagUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		tag: *const ::std::os::raw::c_char,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemFromTagAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		tag: *const ::std::os::raw::c_char,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemParent(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		parentIndex: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemNumChildren(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		numChildren: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemNumDescendents(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		numDescendents: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemLevel(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		level: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTreeColumnAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTreeColumnUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTreeColumn(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumTreeColumns(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		numColumns: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTreeCellAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTreeCellAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeColumnAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeColumnAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTreeColumnAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTreeColumnAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellRingItemAttribute(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		ringItemIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTreeCellRingItemAttribute(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		ringItemIndex: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetColumnWidthToWidestCellContents(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		columnIndex: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetRowHeightToTallestCellContents(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		rowIndex: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemPathLengthUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		separator: *const ::std::os::raw::c_char,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemPathLengthAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		separator: *const ::std::os::raw::c_char,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemPathUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		separator: *const ::std::os::raw::c_char,
		path: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeItemPathAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		separator: *const ::std::os::raw::c_char,
		path: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SortTreeItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		siblingIndex: ::std::os::raw::c_int,
		keyCol: ::std::os::raw::c_int,
		descending: ::std::os::raw::c_int,
		sortSubtrees: ::std::os::raw::c_int,
		comparisonFunction: TreeCellCompareCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumTreeCellRingItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		column: ::std::os::raw::c_int,
		numRingItems: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTreeCellRingItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		ringIndex: ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTreeCellRingItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		ringIndex: ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTreeCellRingItems(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		ringIndex: ::std::os::raw::c_int,
		numRingItemsToDelete: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellRingIndexFromValueAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		begRingIndex: ::std::os::raw::c_int,
		ringIndex: *mut ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellRingIndexFromValueUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		begRingIndex: ::std::os::raw::c_int,
		ringIndex: *mut ::std::os::raw::c_int,
		value: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellRingValueFromIndexAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		ringIndex: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellRingValueFromIndexUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		ringIndex: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellRingValueLengthFromIndexAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		ringIndex: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTreeCellRingValueLengthFromIndexUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		ringIndex: ::std::os::raw::c_int,
		length: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTreeCellRingValueFromIndex(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: ::std::os::raw::c_int,
		col: ::std::os::raw::c_int,
		ringIndex: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActiveTreeCell(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		item: *mut ::std::os::raw::c_int,
		col: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = "/\n/*** functions for splitter controls ***/\n/"]
	pub fn AddCtrlToSplitter(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		anchor: ::std::os::raw::c_int,
		attachedControl: ::std::os::raw::c_int,
		snapOnAttach: ::std::os::raw::c_int,
		move_: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn AddPanelToSplitter(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		anchor: ::std::os::raw::c_int,
		attachedPanel: ::std::os::raw::c_int,
		snapOnAttach: ::std::os::raw::c_int,
		move_: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RemoveCtrlFromSplitter(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attachedControl: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn RemovePanelFromSplitter(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		attachedPanel: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn OperateSplitter(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		delta: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = "/\n/*** functions for tab controls ***/\n/"]
	pub fn InsertTabPageAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertTabPageUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		label: *const ::std::os::raw::c_char,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertPanelAsTabPage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		panelToInsert: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn CopyTabPage(
		panelSrc: ::std::os::raw::c_int,
		controlSrc: ::std::os::raw::c_int,
		indexSrc: ::std::os::raw::c_int,
		panelDst: ::std::os::raw::c_int,
		controlDst: ::std::os::raw::c_int,
		indexDst: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MoveTabPage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		indexDst: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteTabPage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		count: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetPanelHandleFromTabPage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		tabPanel: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumTabPages(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		numPages: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetActiveTabPage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetActiveTabPage(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTabPageAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetTabPageAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTabPageAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTabPageAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetTabPageFromPoint(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		coordinate: Point,
		index: *mut ::std::os::raw::c_int,
		area: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
#[doc = "/\n/***  functions for databinding  ***/\n/"]
pub type DSHandle = ::std::os::raw::c_int;
unsafe extern "C" {
	pub fn DSBindCtrlAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		URL: *mut ::std::os::raw::c_char,
		accessMode: ::std::os::raw::c_int,
		dsHandle: *mut DSHandle,
		dsError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DSBindCtrlUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		URL: *mut ::std::os::raw::c_char,
		accessMode: ::std::os::raw::c_int,
		dsHandle: *mut DSHandle,
		dsError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DSBindPlotAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		plotId: ::std::os::raw::c_int,
		URL: *mut ::std::os::raw::c_char,
		dsHandle: *mut DSHandle,
		dsError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DSBindPlotUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		plotId: ::std::os::raw::c_int,
		URL: *mut ::std::os::raw::c_char,
		dsHandle: *mut DSHandle,
		dsError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DSUnbind(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		dsError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DSGetBoundPlotID(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		plot: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DSBindTableCellRangeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		URL: *mut ::std::os::raw::c_char,
		accessMode: ::std::os::raw::c_int,
		dsHandle: *mut DSHandle,
		dsError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DSBindTableCellRangeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		cellRange: Rect,
		URL: *mut ::std::os::raw::c_char,
		accessMode: ::std::os::raw::c_int,
		dsHandle: *mut DSHandle,
		dsError: *mut HRESULT,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = "/\n/*** functions for control menus ***/\n/"]
	pub fn NewCtrlMenuItemAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		beforeMenuItem: ::std::os::raw::c_int,
		eventFunction: CtrlMenuCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewCtrlMenuItemUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		itemLabel: *const ::std::os::raw::c_char,
		beforeMenuItem: ::std::os::raw::c_int,
		eventFunction: CtrlMenuCallbackPtr,
		callbackData: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn NewCtrlMenuSeparator(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		beforeMenuItem: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardCtrlMenuItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn HideBuiltInCtrlMenuItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ShowBuiltInCtrlMenuItem(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
		beforeMenuItem: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlMenuAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlMenuAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlMenuAttributeAnsi(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlMenuAttributeUtf8(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		menuItem: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		value: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = "/\n/***  functions for color ramps  ***/\n/"]
	pub fn SetNumericColorRamp(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		colorMapArray: *mut ColorMapEntry,
		hiColor: ::std::os::raw::c_int,
		numColors: ::std::os::raw::c_int,
		interpColors: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumericColorRamp(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
		colorMapArray: *mut ColorMapEntry,
		hiColor: *mut ::std::os::raw::c_int,
		interpColors: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardNumericColorRamp(
		panel: ::std::os::raw::c_int,
		control: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	#[doc = "/\n/***  functions for control arrays  ***/\n/"]
	pub fn NewCtrlArray(panel: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DiscardCtrlArray(
		ctrlArray: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn InsertCtrlArrayItem(
		ctrlArray: ::std::os::raw::c_int,
		panel: ::std::os::raw::c_int,
		ctrlToAdd: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn DeleteCtrlArrayItem(
		ctrlArray: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
		count: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn ClearCtrlArray(
		ctrlArray: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlArrayItem(
		ctrlArray: ::std::os::raw::c_int,
		index: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetNumCtrlArrayItems(
		ctrlArray: ::std::os::raw::c_int,
		count: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlArrayIndex(
		ctrlArray: ::std::os::raw::c_int,
		panel: ::std::os::raw::c_int,
		ctrl: ::std::os::raw::c_int,
		index: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlArrayPanel(
		ctrlArray: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlArrayFromResourceID(
		panel: ::std::os::raw::c_int,
		ctrlArrayResourceID: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn MoveCtrlArray(
		ctrlArray: ::std::os::raw::c_int,
		xDelta: ::std::os::raw::c_int,
		yDelta: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn GetCtrlArrayBoundingRect(
		ctrlArray: ::std::os::raw::c_int,
		top: *mut ::std::os::raw::c_int,
		left: *mut ::std::os::raw::c_int,
		height: *mut ::std::os::raw::c_int,
		width: *mut ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlArrayAttributeAnsi(
		ctrlArray: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlArrayAttributeUtf8(
		ctrlArray: ::std::os::raw::c_int,
		attribute: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlArrayValAnsi(
		ctrlArray: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn SetCtrlArrayValUtf8(
		ctrlArray: ::std::os::raw::c_int,
		...
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub static mut __CVIUserHInst: *mut ::std::os::raw::c_void;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
